/**
 * generated by Xtext 2.12.0
 */
package it.unige.dibris.trace_expression_language.generator;

import com.google.common.collect.Iterables;
import it.unige.dibris.trace_expression_language.tExp.AtomExpression;
import it.unige.dibris.trace_expression_language.tExp.EventType;
import it.unige.dibris.trace_expression_language.tExp.Expression;
import it.unige.dibris.trace_expression_language.tExp.Msg;
import it.unige.dibris.trace_expression_language.tExp.NumberExpression;
import it.unige.dibris.trace_expression_language.tExp.PrologExpression;
import it.unige.dibris.trace_expression_language.tExp.StringExpression;
import it.unige.dibris.trace_expression_language.tExp.Term;
import it.unige.dibris.trace_expression_language.tExp.TraceExpression;
import it.unige.dibris.trace_expression_language.tExp.VariableExpression;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class TExpGenerator extends AbstractGenerator {
  private String tExpCurrentName;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<TraceExpression> _filter = Iterables.<TraceExpression>filter(_iterable, TraceExpression.class);
    for (final TraceExpression tExp : _filter) {
      {
        String _name = tExp.getName();
        String _plus = (_name + ".pl");
        String _compile = this.compile(tExp);
        fsa.generateFile(_plus, _compile);
        String _name_1 = tExp.getName();
        String _substring = _name_1.substring(0, 1);
        String _upperCase = _substring.toUpperCase();
        String _name_2 = tExp.getName();
        String _substring_1 = _name_2.substring(1);
        String _plus_1 = (_upperCase + _substring_1);
        String _plus_2 = (_plus_1 + ".java");
        CharSequence _javaCompile = this.javaCompile(tExp);
        fsa.generateFile(_plus_2, _javaCompile);
      }
    }
  }
  
  public CharSequence javaCompile(final TraceExpression tExp) {
    throw new Error("Unresolved compilation problems:"
      + "\nSingletons cannot be resolved to a type."
      + "\nSize cannot be resolved to a type."
      + "\nCardinality cannot be resolved to a type."
      + "\nThe method or field roles is undefined for the type TraceExpression"
      + "\nThe method or field partition is undefined for the type TraceExpression"
      + "\nThe method or field partition is undefined for the type TraceExpression"
      + "\nThe method or field partition is undefined for the type TraceExpression"
      + "\nThe method or field constraints is undefined for the type TraceExpression"
      + "\nThe method or field roles is undefined for the type TraceExpression"
      + "\nclass_ cannot be resolved"
      + "\n!== cannot be resolved"
      + "\nclass_ cannot be resolved"
      + "\nname cannot be resolved"
      + "\nclass_ cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nargs cannot be resolved"
      + "\nreplace cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\n!== cannot be resolved"
      + "\n&& cannot be resolved"
      + "\nsize cannot be resolved"
      + "\n> cannot be resolved"
      + "\nget cannot be resolved"
      + "\nconstraints cannot be resolved"
      + "\nroles cannot be resolved"
      + "\nname cannot be resolved"
      + "\nleft cannot be resolved"
      + "\nright cannot be resolved"
      + "\ntogether cannot be resolved"
      + "\n!== cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nparMin cannot be resolved"
      + "\n== cannot be resolved"
      + "\nparMax cannot be resolved"
      + "\n== cannot be resolved"
      + "\nminSingletons cannot be resolved"
      + "\n- cannot be resolved"
      + "\nmaxSingletons cannot be resolved"
      + "\n- cannot be resolved"
      + "\nminSingletons cannot be resolved"
      + "\n- cannot be resolved"
      + "\nmaxSingletons cannot be resolved"
      + "\nparMax cannot be resolved"
      + "\n== cannot be resolved"
      + "\nminSingletons cannot be resolved"
      + "\nmaxSingletons cannot be resolved"
      + "\n- cannot be resolved"
      + "\nminSingletons cannot be resolved"
      + "\nmaxSingletons cannot be resolved"
      + "\nparMin cannot be resolved"
      + "\n== cannot be resolved"
      + "\nparMax cannot be resolved"
      + "\n== cannot be resolved"
      + "\nminSize cannot be resolved"
      + "\n- cannot be resolved"
      + "\nmaxSize cannot be resolved"
      + "\n- cannot be resolved"
      + "\nminSize cannot be resolved"
      + "\n- cannot be resolved"
      + "\nmaxSize cannot be resolved"
      + "\nparMax cannot be resolved"
      + "\n== cannot be resolved"
      + "\nminSize cannot be resolved"
      + "\nmaxSize cannot be resolved"
      + "\n- cannot be resolved"
      + "\nminSize cannot be resolved"
      + "\nmaxSize cannot be resolved"
      + "\nparMin cannot be resolved"
      + "\n== cannot be resolved"
      + "\nparMax cannot be resolved"
      + "\n== cannot be resolved"
      + "\nminCardinality cannot be resolved"
      + "\n- cannot be resolved"
      + "\nmaxCardinality cannot be resolved"
      + "\n- cannot be resolved"
      + "\nminCardinality cannot be resolved"
      + "\n- cannot be resolved"
      + "\nmaxCardinality cannot be resolved"
      + "\nparMax cannot be resolved"
      + "\n== cannot be resolved"
      + "\nminCardinality cannot be resolved"
      + "\nmaxCardinality cannot be resolved"
      + "\n- cannot be resolved"
      + "\nminCardinality cannot be resolved"
      + "\nmaxCardinality cannot be resolved"
      + "\nname cannot be resolved");
  }
  
  public String compile(final TraceExpression tExp) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field roles is undefined for the type TraceExpression"
      + "\nname cannot be resolved"
      + "\n+ cannot be resolved");
  }
  
  public String compile(final Term term) {
    String _name = term.getName();
    String _substring = _name.substring(0, 1);
    String _upperCase = _substring.toUpperCase();
    String _name_1 = term.getName();
    String _substring_1 = _name_1.substring(1);
    String _plus = (_upperCase + _substring_1);
    String _plus_1 = (_plus + " = ");
    Expression _expr = term.getExpr();
    String _compile = this.compile(_expr);
    return (_plus_1 + _compile);
  }
  
  public String compile(final Expression expr) {
    throw new Error("Unresolved compilation problems:"
      + "\nFilterExpr cannot be resolved to a type."
      + "\nSeqExpr cannot be resolved to a type."
      + "\nVarExpr cannot be resolved to a type."
      + "\nTerminalExpr cannot be resolved to a type."
      + "\nThe method or field filterExpr is undefined for the type Expression"
      + "\nThe method or field filterExpr is undefined for the type Expression"
      + "\nThe method or field filterExpr is undefined for the type Expression"
      + "\nThe method or field filterExpr is undefined for the type Expression"
      + "\nThe method or field filterExpr is undefined for the type Expression"
      + "\nThe method or field filterExpr is undefined for the type Expression"
      + "\nThe method or field filterExpr is undefined for the type Expression"
      + "\nThe method or field seqExpr is undefined for the type Expression"
      + "\nThe method or field seqExpr is undefined for the type Expression"
      + "\nThe method or field seqExpr is undefined for the type Expression"
      + "\nThe method or field seqExpr is undefined for the type Expression"
      + "\nThe method or field seqExpr is undefined for the type Expression"
      + "\nThe method or field seqExpr is undefined for the type Expression"
      + "\nThe method or field seqExpr is undefined for the type Expression"
      + "\nThe method or field varExpr is undefined for the type Expression"
      + "\nThe method or field varExpr is undefined for the type Expression"
      + "\nThe method or field terminalExpr is undefined for the type Expression"
      + "\nThe method or field terminalExpr is undefined for the type Expression"
      + "\nThe method or field terminalExpr is undefined for the type Expression"
      + "\nThe method or field terminalExpr is undefined for the type Expression"
      + "\nThe method or field terminalExpr is undefined for the type Expression"
      + "\nThe method or field terminalExpr is undefined for the type Expression"
      + "\nUnreachable code: The if condition can never match. It is already handled by a previous condition."
      + "\nUnreachable code: The if condition can never match. It is already handled by a previous condition."
      + "\nUnreachable code: The if condition can never match. It is already handled by a previous condition."
      + "\nUnreachable code: The if condition can never match. It is already handled by a previous condition."
      + "\nfirst cannot be resolved"
      + "\n!== cannot be resolved"
      + "\ntypeFilter cannot be resolved"
      + "\nname cannot be resolved"
      + "\nfirst cannot be resolved"
      + "\ncompile cannot be resolved"
      + "\nexprs cannot be resolved"
      + "\ncompile cannot be resolved"
      + "\nbodyFilter cannot be resolved"
      + "\ncompile cannot be resolved"
      + "\ntypeFilter cannot be resolved"
      + "\nname cannot be resolved"
      + "\nbodyFilter cannot be resolved"
      + "\ncompile cannot be resolved"
      + "\nfirst cannot be resolved"
      + "\n!== cannot be resolved"
      + "\ntypeSeq cannot be resolved"
      + "\nname cannot be resolved"
      + "\nfirst cannot be resolved"
      + "\ncompile cannot be resolved"
      + "\nexprs cannot be resolved"
      + "\ncompile cannot be resolved"
      + "\nbodySeq cannot be resolved"
      + "\ncompile cannot be resolved"
      + "\ntypeSeq cannot be resolved"
      + "\nname cannot be resolved"
      + "\nbodySeq cannot be resolved"
      + "\ncompile cannot be resolved"
      + "\nvariable cannot be resolved"
      + "\nbodyVar cannot be resolved"
      + "\ncompile cannot be resolved"
      + "\nterm cannot be resolved"
      + "\n!== cannot be resolved"
      + "\nterm cannot be resolved"
      + "\nname cannot be resolved"
      + "\nsubstring cannot be resolved"
      + "\ntoUpperCase cannot be resolved"
      + "\n+ cannot be resolved"
      + "\nterm cannot be resolved"
      + "\nname cannot be resolved"
      + "\nsubstring cannot be resolved"
      + "\neps cannot be resolved"
      + "\n!== cannot be resolved"
      + "\nexpr cannot be resolved"
      + "\n!== cannot be resolved"
      + "\nexpr cannot be resolved"
      + "\ncompile cannot be resolved");
  }
  
  public String compile(final EventType eventType) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field channel is undefined for the type EventType"
      + "\nThe method or field channel is undefined for the type EventType"
      + "\n!== cannot be resolved"
      + "\nreliability cannot be resolved");
  }
  
  public String compile(final Msg msg) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field async_sender is undefined for the type Msg"
      + "\nThe method or field async_sender is undefined for the type Msg"
      + "\nThe method or field receiver is undefined for the type Msg"
      + "\nThe method or field async_receiver is undefined for the type Msg"
      + "\nThe method or field sender is undefined for the type Msg"
      + "\nThe method or field async_receiver is undefined for the type Msg"
      + "\nThe method or field sender is undefined for the type Msg"
      + "\nThe method or field receiver is undefined for the type Msg"
      + "\n!== cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\n!== cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved"
      + "\nname cannot be resolved");
  }
  
  public String compile(final PrologExpression expr) {
    if ((expr instanceof AtomExpression)) {
      PrologExpression _terms = ((AtomExpression)expr).getTerms();
      boolean _tripleNotEquals = (_terms != null);
      if (_tripleNotEquals) {
        String _atom = ((AtomExpression)expr).getAtom();
        String _plus = (_atom + "(");
        PrologExpression _terms_1 = ((AtomExpression)expr).getTerms();
        String _compile = this.compile(_terms_1);
        String _plus_1 = (_plus + _compile);
        return (_plus_1 + ")");
      } else {
        return ((AtomExpression)expr).getAtom();
      }
    } else {
      if ((expr instanceof NumberExpression)) {
        return ((NumberExpression)expr).getValue();
      } else {
        if ((expr instanceof StringExpression)) {
          String _value = ((StringExpression)expr).getValue();
          String _plus_2 = ("\'" + _value);
          return (_plus_2 + "\'");
        } else {
          if ((expr instanceof VariableExpression)) {
            return ((VariableExpression)expr).getName();
          } else {
            PrologExpression _left = expr.getLeft();
            boolean _tripleNotEquals_1 = (_left != null);
            if (_tripleNotEquals_1) {
              PrologExpression _right = expr.getRight();
              boolean _tripleNotEquals_2 = (_right != null);
              if (_tripleNotEquals_2) {
                PrologExpression _left_1 = expr.getLeft();
                String _compile_1 = this.compile(_left_1);
                String _plus_3 = (_compile_1 + " ");
                String _op = expr.getOp();
                String _plus_4 = (_plus_3 + _op);
                String _plus_5 = (_plus_4 + " ");
                PrologExpression _right_1 = expr.getRight();
                String _compile_2 = this.compile(_right_1);
                return (_plus_5 + _compile_2);
              } else {
                PrologExpression _left_2 = expr.getLeft();
                return this.compile(_left_2);
              }
            } else {
              PrologExpression _right_2 = expr.getRight();
              boolean _tripleNotEquals_3 = (_right_2 != null);
              if (_tripleNotEquals_3) {
                PrologExpression _right_3 = expr.getRight();
                return this.compile(_right_3);
              } else {
                return "";
              }
            }
          }
        }
      }
    }
  }
}
