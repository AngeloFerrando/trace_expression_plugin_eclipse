/**
 * generated by Xtext 2.12.0
 */
package it.unige.dibris.trace_expression_language.tExp.impl;

import it.unige.dibris.trace_expression_language.tExp.EventType;
import it.unige.dibris.trace_expression_language.tExp.Expression;
import it.unige.dibris.trace_expression_language.tExp.PrologExpression;
import it.unige.dibris.trace_expression_language.tExp.TExpPackage;
import it.unige.dibris.trace_expression_language.tExp.Term;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.ExpressionImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.ExpressionImpl#getBodyVar <em>Body Var</em>}</li>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.ExpressionImpl#getTypeFilter <em>Type Filter</em>}</li>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.ExpressionImpl#getFirst <em>First</em>}</li>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.ExpressionImpl#getExprs <em>Exprs</em>}</li>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.ExpressionImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.ExpressionImpl#getBodyFilter <em>Body Filter</em>}</li>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.ExpressionImpl#getTypeSeq <em>Type Seq</em>}</li>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.ExpressionImpl#getBodySeq <em>Body Seq</em>}</li>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.ExpressionImpl#getEps <em>Eps</em>}</li>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.ExpressionImpl#getTerm <em>Term</em>}</li>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.ExpressionImpl#getExpr <em>Expr</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends MinimalEObjectImpl.Container implements Expression
{
  /**
   * The default value of the '{@link #getVariable() <em>Variable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected static final String VARIABLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected String variable = VARIABLE_EDEFAULT;

  /**
   * The cached value of the '{@link #getBodyVar() <em>Body Var</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBodyVar()
   * @generated
   * @ordered
   */
  protected Expression bodyVar;

  /**
   * The cached value of the '{@link #getTypeFilter() <em>Type Filter</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeFilter()
   * @generated
   * @ordered
   */
  protected EventType typeFilter;

  /**
   * The cached value of the '{@link #getFirst() <em>First</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFirst()
   * @generated
   * @ordered
   */
  protected PrologExpression first;

  /**
   * The cached value of the '{@link #getExprs() <em>Exprs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprs()
   * @generated
   * @ordered
   */
  protected EList<PrologExpression> exprs;

  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final String OPERATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected String operator = OPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getBodyFilter() <em>Body Filter</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBodyFilter()
   * @generated
   * @ordered
   */
  protected Expression bodyFilter;

  /**
   * The cached value of the '{@link #getTypeSeq() <em>Type Seq</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeSeq()
   * @generated
   * @ordered
   */
  protected EventType typeSeq;

  /**
   * The cached value of the '{@link #getBodySeq() <em>Body Seq</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBodySeq()
   * @generated
   * @ordered
   */
  protected Expression bodySeq;

  /**
   * The default value of the '{@link #getEps() <em>Eps</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEps()
   * @generated
   * @ordered
   */
  protected static final String EPS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEps() <em>Eps</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEps()
   * @generated
   * @ordered
   */
  protected String eps = EPS_EDEFAULT;

  /**
   * The cached value of the '{@link #getTerm() <em>Term</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTerm()
   * @generated
   * @ordered
   */
  protected Term term;

  /**
   * The cached value of the '{@link #getExpr() <em>Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr()
   * @generated
   * @ordered
   */
  protected Expression expr;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TExpPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVariable(String newVariable)
  {
    String oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.EXPRESSION__VARIABLE, oldVariable, variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getBodyVar()
  {
    return bodyVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBodyVar(Expression newBodyVar, NotificationChain msgs)
  {
    Expression oldBodyVar = bodyVar;
    bodyVar = newBodyVar;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TExpPackage.EXPRESSION__BODY_VAR, oldBodyVar, newBodyVar);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBodyVar(Expression newBodyVar)
  {
    if (newBodyVar != bodyVar)
    {
      NotificationChain msgs = null;
      if (bodyVar != null)
        msgs = ((InternalEObject)bodyVar).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TExpPackage.EXPRESSION__BODY_VAR, null, msgs);
      if (newBodyVar != null)
        msgs = ((InternalEObject)newBodyVar).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TExpPackage.EXPRESSION__BODY_VAR, null, msgs);
      msgs = basicSetBodyVar(newBodyVar, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.EXPRESSION__BODY_VAR, newBodyVar, newBodyVar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventType getTypeFilter()
  {
    if (typeFilter != null && typeFilter.eIsProxy())
    {
      InternalEObject oldTypeFilter = (InternalEObject)typeFilter;
      typeFilter = (EventType)eResolveProxy(oldTypeFilter);
      if (typeFilter != oldTypeFilter)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TExpPackage.EXPRESSION__TYPE_FILTER, oldTypeFilter, typeFilter));
      }
    }
    return typeFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventType basicGetTypeFilter()
  {
    return typeFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeFilter(EventType newTypeFilter)
  {
    EventType oldTypeFilter = typeFilter;
    typeFilter = newTypeFilter;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.EXPRESSION__TYPE_FILTER, oldTypeFilter, typeFilter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrologExpression getFirst()
  {
    return first;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFirst(PrologExpression newFirst, NotificationChain msgs)
  {
    PrologExpression oldFirst = first;
    first = newFirst;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TExpPackage.EXPRESSION__FIRST, oldFirst, newFirst);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFirst(PrologExpression newFirst)
  {
    if (newFirst != first)
    {
      NotificationChain msgs = null;
      if (first != null)
        msgs = ((InternalEObject)first).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TExpPackage.EXPRESSION__FIRST, null, msgs);
      if (newFirst != null)
        msgs = ((InternalEObject)newFirst).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TExpPackage.EXPRESSION__FIRST, null, msgs);
      msgs = basicSetFirst(newFirst, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.EXPRESSION__FIRST, newFirst, newFirst));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<PrologExpression> getExprs()
  {
    if (exprs == null)
    {
      exprs = new EObjectContainmentEList<PrologExpression>(PrologExpression.class, this, TExpPackage.EXPRESSION__EXPRS);
    }
    return exprs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOperator(String newOperator)
  {
    String oldOperator = operator;
    operator = newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.EXPRESSION__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getBodyFilter()
  {
    return bodyFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBodyFilter(Expression newBodyFilter, NotificationChain msgs)
  {
    Expression oldBodyFilter = bodyFilter;
    bodyFilter = newBodyFilter;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TExpPackage.EXPRESSION__BODY_FILTER, oldBodyFilter, newBodyFilter);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBodyFilter(Expression newBodyFilter)
  {
    if (newBodyFilter != bodyFilter)
    {
      NotificationChain msgs = null;
      if (bodyFilter != null)
        msgs = ((InternalEObject)bodyFilter).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TExpPackage.EXPRESSION__BODY_FILTER, null, msgs);
      if (newBodyFilter != null)
        msgs = ((InternalEObject)newBodyFilter).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TExpPackage.EXPRESSION__BODY_FILTER, null, msgs);
      msgs = basicSetBodyFilter(newBodyFilter, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.EXPRESSION__BODY_FILTER, newBodyFilter, newBodyFilter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventType getTypeSeq()
  {
    if (typeSeq != null && typeSeq.eIsProxy())
    {
      InternalEObject oldTypeSeq = (InternalEObject)typeSeq;
      typeSeq = (EventType)eResolveProxy(oldTypeSeq);
      if (typeSeq != oldTypeSeq)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TExpPackage.EXPRESSION__TYPE_SEQ, oldTypeSeq, typeSeq));
      }
    }
    return typeSeq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventType basicGetTypeSeq()
  {
    return typeSeq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeSeq(EventType newTypeSeq)
  {
    EventType oldTypeSeq = typeSeq;
    typeSeq = newTypeSeq;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.EXPRESSION__TYPE_SEQ, oldTypeSeq, typeSeq));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getBodySeq()
  {
    return bodySeq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBodySeq(Expression newBodySeq, NotificationChain msgs)
  {
    Expression oldBodySeq = bodySeq;
    bodySeq = newBodySeq;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TExpPackage.EXPRESSION__BODY_SEQ, oldBodySeq, newBodySeq);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBodySeq(Expression newBodySeq)
  {
    if (newBodySeq != bodySeq)
    {
      NotificationChain msgs = null;
      if (bodySeq != null)
        msgs = ((InternalEObject)bodySeq).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TExpPackage.EXPRESSION__BODY_SEQ, null, msgs);
      if (newBodySeq != null)
        msgs = ((InternalEObject)newBodySeq).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TExpPackage.EXPRESSION__BODY_SEQ, null, msgs);
      msgs = basicSetBodySeq(newBodySeq, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.EXPRESSION__BODY_SEQ, newBodySeq, newBodySeq));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getEps()
  {
    return eps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEps(String newEps)
  {
    String oldEps = eps;
    eps = newEps;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.EXPRESSION__EPS, oldEps, eps));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Term getTerm()
  {
    if (term != null && term.eIsProxy())
    {
      InternalEObject oldTerm = (InternalEObject)term;
      term = (Term)eResolveProxy(oldTerm);
      if (term != oldTerm)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TExpPackage.EXPRESSION__TERM, oldTerm, term));
      }
    }
    return term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Term basicGetTerm()
  {
    return term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTerm(Term newTerm)
  {
    Term oldTerm = term;
    term = newTerm;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.EXPRESSION__TERM, oldTerm, term));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getExpr()
  {
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpr(Expression newExpr, NotificationChain msgs)
  {
    Expression oldExpr = expr;
    expr = newExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TExpPackage.EXPRESSION__EXPR, oldExpr, newExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpr(Expression newExpr)
  {
    if (newExpr != expr)
    {
      NotificationChain msgs = null;
      if (expr != null)
        msgs = ((InternalEObject)expr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TExpPackage.EXPRESSION__EXPR, null, msgs);
      if (newExpr != null)
        msgs = ((InternalEObject)newExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TExpPackage.EXPRESSION__EXPR, null, msgs);
      msgs = basicSetExpr(newExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.EXPRESSION__EXPR, newExpr, newExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TExpPackage.EXPRESSION__BODY_VAR:
        return basicSetBodyVar(null, msgs);
      case TExpPackage.EXPRESSION__FIRST:
        return basicSetFirst(null, msgs);
      case TExpPackage.EXPRESSION__EXPRS:
        return ((InternalEList<?>)getExprs()).basicRemove(otherEnd, msgs);
      case TExpPackage.EXPRESSION__BODY_FILTER:
        return basicSetBodyFilter(null, msgs);
      case TExpPackage.EXPRESSION__BODY_SEQ:
        return basicSetBodySeq(null, msgs);
      case TExpPackage.EXPRESSION__EXPR:
        return basicSetExpr(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TExpPackage.EXPRESSION__VARIABLE:
        return getVariable();
      case TExpPackage.EXPRESSION__BODY_VAR:
        return getBodyVar();
      case TExpPackage.EXPRESSION__TYPE_FILTER:
        if (resolve) return getTypeFilter();
        return basicGetTypeFilter();
      case TExpPackage.EXPRESSION__FIRST:
        return getFirst();
      case TExpPackage.EXPRESSION__EXPRS:
        return getExprs();
      case TExpPackage.EXPRESSION__OPERATOR:
        return getOperator();
      case TExpPackage.EXPRESSION__BODY_FILTER:
        return getBodyFilter();
      case TExpPackage.EXPRESSION__TYPE_SEQ:
        if (resolve) return getTypeSeq();
        return basicGetTypeSeq();
      case TExpPackage.EXPRESSION__BODY_SEQ:
        return getBodySeq();
      case TExpPackage.EXPRESSION__EPS:
        return getEps();
      case TExpPackage.EXPRESSION__TERM:
        if (resolve) return getTerm();
        return basicGetTerm();
      case TExpPackage.EXPRESSION__EXPR:
        return getExpr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TExpPackage.EXPRESSION__VARIABLE:
        setVariable((String)newValue);
        return;
      case TExpPackage.EXPRESSION__BODY_VAR:
        setBodyVar((Expression)newValue);
        return;
      case TExpPackage.EXPRESSION__TYPE_FILTER:
        setTypeFilter((EventType)newValue);
        return;
      case TExpPackage.EXPRESSION__FIRST:
        setFirst((PrologExpression)newValue);
        return;
      case TExpPackage.EXPRESSION__EXPRS:
        getExprs().clear();
        getExprs().addAll((Collection<? extends PrologExpression>)newValue);
        return;
      case TExpPackage.EXPRESSION__OPERATOR:
        setOperator((String)newValue);
        return;
      case TExpPackage.EXPRESSION__BODY_FILTER:
        setBodyFilter((Expression)newValue);
        return;
      case TExpPackage.EXPRESSION__TYPE_SEQ:
        setTypeSeq((EventType)newValue);
        return;
      case TExpPackage.EXPRESSION__BODY_SEQ:
        setBodySeq((Expression)newValue);
        return;
      case TExpPackage.EXPRESSION__EPS:
        setEps((String)newValue);
        return;
      case TExpPackage.EXPRESSION__TERM:
        setTerm((Term)newValue);
        return;
      case TExpPackage.EXPRESSION__EXPR:
        setExpr((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TExpPackage.EXPRESSION__VARIABLE:
        setVariable(VARIABLE_EDEFAULT);
        return;
      case TExpPackage.EXPRESSION__BODY_VAR:
        setBodyVar((Expression)null);
        return;
      case TExpPackage.EXPRESSION__TYPE_FILTER:
        setTypeFilter((EventType)null);
        return;
      case TExpPackage.EXPRESSION__FIRST:
        setFirst((PrologExpression)null);
        return;
      case TExpPackage.EXPRESSION__EXPRS:
        getExprs().clear();
        return;
      case TExpPackage.EXPRESSION__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
      case TExpPackage.EXPRESSION__BODY_FILTER:
        setBodyFilter((Expression)null);
        return;
      case TExpPackage.EXPRESSION__TYPE_SEQ:
        setTypeSeq((EventType)null);
        return;
      case TExpPackage.EXPRESSION__BODY_SEQ:
        setBodySeq((Expression)null);
        return;
      case TExpPackage.EXPRESSION__EPS:
        setEps(EPS_EDEFAULT);
        return;
      case TExpPackage.EXPRESSION__TERM:
        setTerm((Term)null);
        return;
      case TExpPackage.EXPRESSION__EXPR:
        setExpr((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TExpPackage.EXPRESSION__VARIABLE:
        return VARIABLE_EDEFAULT == null ? variable != null : !VARIABLE_EDEFAULT.equals(variable);
      case TExpPackage.EXPRESSION__BODY_VAR:
        return bodyVar != null;
      case TExpPackage.EXPRESSION__TYPE_FILTER:
        return typeFilter != null;
      case TExpPackage.EXPRESSION__FIRST:
        return first != null;
      case TExpPackage.EXPRESSION__EXPRS:
        return exprs != null && !exprs.isEmpty();
      case TExpPackage.EXPRESSION__OPERATOR:
        return OPERATOR_EDEFAULT == null ? operator != null : !OPERATOR_EDEFAULT.equals(operator);
      case TExpPackage.EXPRESSION__BODY_FILTER:
        return bodyFilter != null;
      case TExpPackage.EXPRESSION__TYPE_SEQ:
        return typeSeq != null;
      case TExpPackage.EXPRESSION__BODY_SEQ:
        return bodySeq != null;
      case TExpPackage.EXPRESSION__EPS:
        return EPS_EDEFAULT == null ? eps != null : !EPS_EDEFAULT.equals(eps);
      case TExpPackage.EXPRESSION__TERM:
        return term != null;
      case TExpPackage.EXPRESSION__EXPR:
        return expr != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (variable: ");
    result.append(variable);
    result.append(", operator: ");
    result.append(operator);
    result.append(", eps: ");
    result.append(eps);
    result.append(')');
    return result.toString();
  }

} //ExpressionImpl
