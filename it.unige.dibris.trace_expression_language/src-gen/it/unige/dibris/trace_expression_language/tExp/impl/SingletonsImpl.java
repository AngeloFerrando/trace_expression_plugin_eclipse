/**
 * generated by Xtext 2.12.0
 */
package it.unige.dibris.trace_expression_language.tExp.impl;

import it.unige.dibris.trace_expression_language.tExp.Singletons;
import it.unige.dibris.trace_expression_language.tExp.TExpPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Singletons</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.SingletonsImpl#getMinSingletons <em>Min Singletons</em>}</li>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.SingletonsImpl#getMaxSingletons <em>Max Singletons</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SingletonsImpl extends ConstraintImpl implements Singletons
{
  /**
   * The default value of the '{@link #getMinSingletons() <em>Min Singletons</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinSingletons()
   * @generated
   * @ordered
   */
  protected static final int MIN_SINGLETONS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMinSingletons() <em>Min Singletons</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinSingletons()
   * @generated
   * @ordered
   */
  protected int minSingletons = MIN_SINGLETONS_EDEFAULT;

  /**
   * The default value of the '{@link #getMaxSingletons() <em>Max Singletons</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxSingletons()
   * @generated
   * @ordered
   */
  protected static final int MAX_SINGLETONS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMaxSingletons() <em>Max Singletons</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxSingletons()
   * @generated
   * @ordered
   */
  protected int maxSingletons = MAX_SINGLETONS_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SingletonsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TExpPackage.Literals.SINGLETONS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getMinSingletons()
  {
    return minSingletons;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMinSingletons(int newMinSingletons)
  {
    int oldMinSingletons = minSingletons;
    minSingletons = newMinSingletons;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.SINGLETONS__MIN_SINGLETONS, oldMinSingletons, minSingletons));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getMaxSingletons()
  {
    return maxSingletons;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMaxSingletons(int newMaxSingletons)
  {
    int oldMaxSingletons = maxSingletons;
    maxSingletons = newMaxSingletons;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.SINGLETONS__MAX_SINGLETONS, oldMaxSingletons, maxSingletons));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TExpPackage.SINGLETONS__MIN_SINGLETONS:
        return getMinSingletons();
      case TExpPackage.SINGLETONS__MAX_SINGLETONS:
        return getMaxSingletons();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TExpPackage.SINGLETONS__MIN_SINGLETONS:
        setMinSingletons((Integer)newValue);
        return;
      case TExpPackage.SINGLETONS__MAX_SINGLETONS:
        setMaxSingletons((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TExpPackage.SINGLETONS__MIN_SINGLETONS:
        setMinSingletons(MIN_SINGLETONS_EDEFAULT);
        return;
      case TExpPackage.SINGLETONS__MAX_SINGLETONS:
        setMaxSingletons(MAX_SINGLETONS_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TExpPackage.SINGLETONS__MIN_SINGLETONS:
        return minSingletons != MIN_SINGLETONS_EDEFAULT;
      case TExpPackage.SINGLETONS__MAX_SINGLETONS:
        return maxSingletons != MAX_SINGLETONS_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (minSingletons: ");
    result.append(minSingletons);
    result.append(", maxSingletons: ");
    result.append(maxSingletons);
    result.append(')');
    return result.toString();
  }

} //SingletonsImpl
