/**
 * generated by Xtext 2.12.0
 */
package it.unige.dibris.trace_expression_language.tExp.impl;

import it.unige.dibris.trace_expression_language.tExp.Constraint;
import it.unige.dibris.trace_expression_language.tExp.Role;
import it.unige.dibris.trace_expression_language.tExp.TExpPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Constraint</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.ConstraintImpl#getLeft <em>Left</em>}</li>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.ConstraintImpl#getTogether <em>Together</em>}</li>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.ConstraintImpl#getRight <em>Right</em>}</li>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.ConstraintImpl#getSplit <em>Split</em>}</li>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.ConstraintImpl#getParMin <em>Par Min</em>}</li>
 *   <li>{@link it.unige.dibris.trace_expression_language.tExp.impl.ConstraintImpl#getParMax <em>Par Max</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConstraintImpl extends MinimalEObjectImpl.Container implements Constraint
{
  /**
   * The cached value of the '{@link #getLeft() <em>Left</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected Role left;

  /**
   * The default value of the '{@link #getTogether() <em>Together</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTogether()
   * @generated
   * @ordered
   */
  protected static final String TOGETHER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTogether() <em>Together</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTogether()
   * @generated
   * @ordered
   */
  protected String together = TOGETHER_EDEFAULT;

  /**
   * The cached value of the '{@link #getRight() <em>Right</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight()
   * @generated
   * @ordered
   */
  protected Role right;

  /**
   * The default value of the '{@link #getSplit() <em>Split</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSplit()
   * @generated
   * @ordered
   */
  protected static final String SPLIT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSplit() <em>Split</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSplit()
   * @generated
   * @ordered
   */
  protected String split = SPLIT_EDEFAULT;

  /**
   * The default value of the '{@link #getParMin() <em>Par Min</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParMin()
   * @generated
   * @ordered
   */
  protected static final String PAR_MIN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getParMin() <em>Par Min</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParMin()
   * @generated
   * @ordered
   */
  protected String parMin = PAR_MIN_EDEFAULT;

  /**
   * The default value of the '{@link #getParMax() <em>Par Max</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParMax()
   * @generated
   * @ordered
   */
  protected static final String PAR_MAX_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getParMax() <em>Par Max</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParMax()
   * @generated
   * @ordered
   */
  protected String parMax = PAR_MAX_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConstraintImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TExpPackage.Literals.CONSTRAINT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Role getLeft()
  {
    if (left != null && left.eIsProxy())
    {
      InternalEObject oldLeft = (InternalEObject)left;
      left = (Role)eResolveProxy(oldLeft);
      if (left != oldLeft)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TExpPackage.CONSTRAINT__LEFT, oldLeft, left));
      }
    }
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Role basicGetLeft()
  {
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeft(Role newLeft)
  {
    Role oldLeft = left;
    left = newLeft;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.CONSTRAINT__LEFT, oldLeft, left));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTogether()
  {
    return together;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTogether(String newTogether)
  {
    String oldTogether = together;
    together = newTogether;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.CONSTRAINT__TOGETHER, oldTogether, together));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Role getRight()
  {
    if (right != null && right.eIsProxy())
    {
      InternalEObject oldRight = (InternalEObject)right;
      right = (Role)eResolveProxy(oldRight);
      if (right != oldRight)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TExpPackage.CONSTRAINT__RIGHT, oldRight, right));
      }
    }
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Role basicGetRight()
  {
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRight(Role newRight)
  {
    Role oldRight = right;
    right = newRight;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.CONSTRAINT__RIGHT, oldRight, right));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSplit()
  {
    return split;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSplit(String newSplit)
  {
    String oldSplit = split;
    split = newSplit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.CONSTRAINT__SPLIT, oldSplit, split));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getParMin()
  {
    return parMin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParMin(String newParMin)
  {
    String oldParMin = parMin;
    parMin = newParMin;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.CONSTRAINT__PAR_MIN, oldParMin, parMin));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getParMax()
  {
    return parMax;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParMax(String newParMax)
  {
    String oldParMax = parMax;
    parMax = newParMax;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TExpPackage.CONSTRAINT__PAR_MAX, oldParMax, parMax));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TExpPackage.CONSTRAINT__LEFT:
        if (resolve) return getLeft();
        return basicGetLeft();
      case TExpPackage.CONSTRAINT__TOGETHER:
        return getTogether();
      case TExpPackage.CONSTRAINT__RIGHT:
        if (resolve) return getRight();
        return basicGetRight();
      case TExpPackage.CONSTRAINT__SPLIT:
        return getSplit();
      case TExpPackage.CONSTRAINT__PAR_MIN:
        return getParMin();
      case TExpPackage.CONSTRAINT__PAR_MAX:
        return getParMax();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TExpPackage.CONSTRAINT__LEFT:
        setLeft((Role)newValue);
        return;
      case TExpPackage.CONSTRAINT__TOGETHER:
        setTogether((String)newValue);
        return;
      case TExpPackage.CONSTRAINT__RIGHT:
        setRight((Role)newValue);
        return;
      case TExpPackage.CONSTRAINT__SPLIT:
        setSplit((String)newValue);
        return;
      case TExpPackage.CONSTRAINT__PAR_MIN:
        setParMin((String)newValue);
        return;
      case TExpPackage.CONSTRAINT__PAR_MAX:
        setParMax((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TExpPackage.CONSTRAINT__LEFT:
        setLeft((Role)null);
        return;
      case TExpPackage.CONSTRAINT__TOGETHER:
        setTogether(TOGETHER_EDEFAULT);
        return;
      case TExpPackage.CONSTRAINT__RIGHT:
        setRight((Role)null);
        return;
      case TExpPackage.CONSTRAINT__SPLIT:
        setSplit(SPLIT_EDEFAULT);
        return;
      case TExpPackage.CONSTRAINT__PAR_MIN:
        setParMin(PAR_MIN_EDEFAULT);
        return;
      case TExpPackage.CONSTRAINT__PAR_MAX:
        setParMax(PAR_MAX_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TExpPackage.CONSTRAINT__LEFT:
        return left != null;
      case TExpPackage.CONSTRAINT__TOGETHER:
        return TOGETHER_EDEFAULT == null ? together != null : !TOGETHER_EDEFAULT.equals(together);
      case TExpPackage.CONSTRAINT__RIGHT:
        return right != null;
      case TExpPackage.CONSTRAINT__SPLIT:
        return SPLIT_EDEFAULT == null ? split != null : !SPLIT_EDEFAULT.equals(split);
      case TExpPackage.CONSTRAINT__PAR_MIN:
        return PAR_MIN_EDEFAULT == null ? parMin != null : !PAR_MIN_EDEFAULT.equals(parMin);
      case TExpPackage.CONSTRAINT__PAR_MAX:
        return PAR_MAX_EDEFAULT == null ? parMax != null : !PAR_MAX_EDEFAULT.equals(parMax);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (together: ");
    result.append(together);
    result.append(", split: ");
    result.append(split);
    result.append(", parMin: ");
    result.append(parMin);
    result.append(", parMax: ");
    result.append(parMax);
    result.append(')');
    return result.toString();
  }

} //ConstraintImpl
