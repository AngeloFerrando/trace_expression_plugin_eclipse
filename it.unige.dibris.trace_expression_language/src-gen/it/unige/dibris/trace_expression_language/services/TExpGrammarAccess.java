/*
 * generated by Xtext 2.12.0
 */
package it.unige.dibris.trace_expression_language.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TExpGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Domainmodel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsTraceExpressionParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Domainmodel:
		//	elements+=TraceExpression*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=TraceExpression*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//TraceExpression
		public RuleCall getElementsTraceExpressionParserRuleCall_0() { return cElementsTraceExpressionParserRuleCall_0; }
	}
	public class IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.ID");
		private final RuleCall cATOMTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ID:
		//	ATOM;
		@Override public ParserRule getRule() { return rule; }
		
		//ATOM
		public RuleCall getATOMTerminalRuleCall() { return cATOMTerminalRuleCall; }
	}
	public class ATOMSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.ATOMS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cIDParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOP1200XFXTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOP1200FXTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOP1150FXTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOP1100XFYTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cOP1050XFYTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cOP1000XFYTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cOP954XFYTerminalRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cOP900FYTerminalRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cOP900FXTerminalRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cOP700XFXTerminalRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cOP700XFXRTerminalRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cOP700XFXLTerminalRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cOP600XFYTerminalRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cOP500YFXTerminalRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cOP500FXTerminalRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cOP400YFXTerminalRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cOP200XFXTerminalRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cOP200XFYTerminalRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		
		//ATOMS:
		//	'.' | '!' | ID | OP1200XFX | OP1200FX | OP1150FX | OP1100XFY | OP1050XFY | OP1000XFY | OP954XFY | OP900FY | OP900FX
		//	| OP700XFX | OP700XFXR | OP700XFXL | OP600XFY | OP500YFX | OP500FX | OP400YFX | OP200XFX | OP200XFY;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' | '!' | ID | OP1200XFX | OP1200FX | OP1150FX | OP1100XFY | OP1050XFY | OP1000XFY | OP954XFY | OP900FY | OP900FX |
		//OP700XFX | OP700XFXR | OP700XFXL | OP600XFY | OP500YFX | OP500FX | OP400YFX | OP200XFX | OP200XFY
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
		
		//ID
		public RuleCall getIDParserRuleCall_2() { return cIDParserRuleCall_2; }
		
		//OP1200XFX
		public RuleCall getOP1200XFXTerminalRuleCall_3() { return cOP1200XFXTerminalRuleCall_3; }
		
		//OP1200FX
		public RuleCall getOP1200FXTerminalRuleCall_4() { return cOP1200FXTerminalRuleCall_4; }
		
		//OP1150FX
		public RuleCall getOP1150FXTerminalRuleCall_5() { return cOP1150FXTerminalRuleCall_5; }
		
		//OP1100XFY
		public RuleCall getOP1100XFYTerminalRuleCall_6() { return cOP1100XFYTerminalRuleCall_6; }
		
		//OP1050XFY
		public RuleCall getOP1050XFYTerminalRuleCall_7() { return cOP1050XFYTerminalRuleCall_7; }
		
		//OP1000XFY
		public RuleCall getOP1000XFYTerminalRuleCall_8() { return cOP1000XFYTerminalRuleCall_8; }
		
		//OP954XFY
		public RuleCall getOP954XFYTerminalRuleCall_9() { return cOP954XFYTerminalRuleCall_9; }
		
		//OP900FY
		public RuleCall getOP900FYTerminalRuleCall_10() { return cOP900FYTerminalRuleCall_10; }
		
		//OP900FX
		public RuleCall getOP900FXTerminalRuleCall_11() { return cOP900FXTerminalRuleCall_11; }
		
		//OP700XFX
		public RuleCall getOP700XFXTerminalRuleCall_12() { return cOP700XFXTerminalRuleCall_12; }
		
		//OP700XFXR
		public RuleCall getOP700XFXRTerminalRuleCall_13() { return cOP700XFXRTerminalRuleCall_13; }
		
		//OP700XFXL
		public RuleCall getOP700XFXLTerminalRuleCall_14() { return cOP700XFXLTerminalRuleCall_14; }
		
		//OP600XFY
		public RuleCall getOP600XFYTerminalRuleCall_15() { return cOP600XFYTerminalRuleCall_15; }
		
		//OP500YFX
		public RuleCall getOP500YFXTerminalRuleCall_16() { return cOP500YFXTerminalRuleCall_16; }
		
		//OP500FX
		public RuleCall getOP500FXTerminalRuleCall_17() { return cOP500FXTerminalRuleCall_17; }
		
		//OP400YFX
		public RuleCall getOP400YFXTerminalRuleCall_18() { return cOP400YFXTerminalRuleCall_18; }
		
		//OP200XFX
		public RuleCall getOP200XFXTerminalRuleCall_19() { return cOP200XFXTerminalRuleCall_19; }
		
		//OP200XFY
		public RuleCall getOP200XFYTerminalRuleCall_20() { return cOP200XFYTerminalRuleCall_20; }
	}
	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.NUMBER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final RuleCall cEXT_INTTerminalRuleCall_2_1_0 = (RuleCall)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1_1 = (RuleCall)cAlternatives_2_1.eContents().get(1);
		
		//NUMBER hidden():
		//	'-'? INT ('.' (EXT_INT | INT))?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT ('.' (EXT_INT | INT))?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//('.' (EXT_INT | INT))?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//EXT_INT | INT
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//EXT_INT
		public RuleCall getEXT_INTTerminalRuleCall_2_1_0() { return cEXT_INTTerminalRuleCall_2_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1_1() { return cINTTerminalRuleCall_2_1_1; }
	}
	public class ExpressionInfinityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.ExpressionInfinity");
		private final RuleCall cExpression1100xfyParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// http://www.csupomona.edu/~jrfisher/www/prolog_tutorial/4.html
		//// xfx infix nonassociative 
		//// xfy infix right-associative 
		//// yfx infix left-associative 
		//// fx prefix nonassociative 
		//// fy prefix right-associative 
		//// xf postfix nonassociative 
		//// yf postfix left-associative
		//ExpressionInfinity PrologExpression:
		//	Expression1100xfy;
		@Override public ParserRule getRule() { return rule; }
		
		////	Expression1200xfx;
		//Expression1100xfy
		public RuleCall getExpression1100xfyParserRuleCall() { return cExpression1100xfyParserRuleCall; }
	}
	public class Expression1100xfyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Expression1100xfy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression1050xfyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPrologExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP1100XFYTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression1100xfyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////Expression1200xfx returns PrologExpression:
		////	Expression1200fx ({PrologExpression.left=current} op=OP1200XFX right=Expression1200fx)?;
		////Expression1200fx returns UnaryExpression:
		////	(op=OP1200FX)? right=Expression1150fx;
		////Expression1150fx returns UnaryExpression:
		////	(op=OP1150FX)? right=Expression1100xfy;
		//Expression1100xfy PrologExpression:
		//	Expression1050xfy ({PrologExpression.left=current} op=OP1100XFY right=Expression1100xfy)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression1050xfy ({PrologExpression.left=current} op=OP1100XFY right=Expression1100xfy)?
		public Group getGroup() { return cGroup; }
		
		//Expression1050xfy
		public RuleCall getExpression1050xfyParserRuleCall_0() { return cExpression1050xfyParserRuleCall_0; }
		
		//({PrologExpression.left=current} op=OP1100XFY right=Expression1100xfy)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrologExpression.left=current}
		public Action getPrologExpressionLeftAction_1_0() { return cPrologExpressionLeftAction_1_0; }
		
		//op=OP1100XFY
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OP1100XFY
		public RuleCall getOpOP1100XFYTerminalRuleCall_1_1_0() { return cOpOP1100XFYTerminalRuleCall_1_1_0; }
		
		//right=Expression1100xfy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression1100xfy
		public RuleCall getRightExpression1100xfyParserRuleCall_1_2_0() { return cRightExpression1100xfyParserRuleCall_1_2_0; }
	}
	public class Expression1050xfyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Expression1050xfy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression1000xfyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPrologExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP1050XFYTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression1050xfyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression1050xfy PrologExpression:
		//	Expression1000xfy ({PrologExpression.left=current} op=OP1050XFY right=Expression1050xfy)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression1000xfy ({PrologExpression.left=current} op=OP1050XFY right=Expression1050xfy)?
		public Group getGroup() { return cGroup; }
		
		//Expression1000xfy
		public RuleCall getExpression1000xfyParserRuleCall_0() { return cExpression1000xfyParserRuleCall_0; }
		
		//({PrologExpression.left=current} op=OP1050XFY right=Expression1050xfy)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrologExpression.left=current}
		public Action getPrologExpressionLeftAction_1_0() { return cPrologExpressionLeftAction_1_0; }
		
		//op=OP1050XFY
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OP1050XFY
		public RuleCall getOpOP1050XFYTerminalRuleCall_1_1_0() { return cOpOP1050XFYTerminalRuleCall_1_1_0; }
		
		//right=Expression1050xfy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression1050xfy
		public RuleCall getRightExpression1050xfyParserRuleCall_1_2_0() { return cRightExpression1050xfyParserRuleCall_1_2_0; }
	}
	public class Expression1000xfyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Expression1000xfy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression954xfyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPrologExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP1000XFYTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression1000xfyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression1000xfy PrologExpression:
		//	Expression954xfy ({PrologExpression.left=current} op=OP1000XFY right=Expression1000xfy)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression954xfy ({PrologExpression.left=current} op=OP1000XFY right=Expression1000xfy)?
		public Group getGroup() { return cGroup; }
		
		//Expression954xfy
		public RuleCall getExpression954xfyParserRuleCall_0() { return cExpression954xfyParserRuleCall_0; }
		
		//({PrologExpression.left=current} op=OP1000XFY right=Expression1000xfy)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrologExpression.left=current}
		public Action getPrologExpressionLeftAction_1_0() { return cPrologExpressionLeftAction_1_0; }
		
		//op=OP1000XFY
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OP1000XFY
		public RuleCall getOpOP1000XFYTerminalRuleCall_1_1_0() { return cOpOP1000XFYTerminalRuleCall_1_1_0; }
		
		//right=Expression1000xfy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression1000xfy
		public RuleCall getRightExpression1000xfyParserRuleCall_1_2_0() { return cRightExpression1000xfyParserRuleCall_1_2_0; }
	}
	public class Expression954xfyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Expression954xfy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression700xfxParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPrologExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP954XFYTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression954xfyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression954xfy PrologExpression:
		//	Expression700xfx ({PrologExpression.left=current} op=OP954XFY right=Expression954xfy)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression700xfx ({PrologExpression.left=current} op=OP954XFY right=Expression954xfy)?
		public Group getGroup() { return cGroup; }
		
		//Expression700xfx
		public RuleCall getExpression700xfxParserRuleCall_0() { return cExpression700xfxParserRuleCall_0; }
		
		//({PrologExpression.left=current} op=OP954XFY right=Expression954xfy)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrologExpression.left=current}
		public Action getPrologExpressionLeftAction_1_0() { return cPrologExpressionLeftAction_1_0; }
		
		//op=OP954XFY
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OP954XFY
		public RuleCall getOpOP954XFYTerminalRuleCall_1_1_0() { return cOpOP954XFYTerminalRuleCall_1_1_0; }
		
		//right=Expression954xfy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression954xfy
		public RuleCall getRightExpression954xfyParserRuleCall_1_2_0() { return cRightExpression954xfyParserRuleCall_1_2_0; }
	}
	public class Expression700xfxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Expression700xfx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression600xfyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPrologExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final RuleCall cOpOP700XFXTerminalRuleCall_1_1_0_0 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOpOP700XFXRTerminalRuleCall_1_1_0_1 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cOpOP700XFXLTerminalRuleCall_1_1_0_2 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression600xfyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////Expression900fy returns UnaryExpression:
		////	op=OP900FY right=Expression900fy | right=Expression900fx;
		////Expression900fx returns UnaryExpression:
		////	(op=OP900FX)? right=Expression700xfx;
		//Expression700xfx PrologExpression:
		//	Expression600xfy ({PrologExpression.left=current} op=(OP700XFX | OP700XFXR | OP700XFXL) right=Expression600xfy)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression600xfy ({PrologExpression.left=current} op=(OP700XFX | OP700XFXR | OP700XFXL) right=Expression600xfy)?
		public Group getGroup() { return cGroup; }
		
		//Expression600xfy
		public RuleCall getExpression600xfyParserRuleCall_0() { return cExpression600xfyParserRuleCall_0; }
		
		//({PrologExpression.left=current} op=(OP700XFX | OP700XFXR | OP700XFXL) right=Expression600xfy)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrologExpression.left=current}
		public Action getPrologExpressionLeftAction_1_0() { return cPrologExpressionLeftAction_1_0; }
		
		//op=(OP700XFX | OP700XFXR | OP700XFXL)
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(OP700XFX | OP700XFXR | OP700XFXL)
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//OP700XFX
		public RuleCall getOpOP700XFXTerminalRuleCall_1_1_0_0() { return cOpOP700XFXTerminalRuleCall_1_1_0_0; }
		
		//OP700XFXR
		public RuleCall getOpOP700XFXRTerminalRuleCall_1_1_0_1() { return cOpOP700XFXRTerminalRuleCall_1_1_0_1; }
		
		//OP700XFXL
		public RuleCall getOpOP700XFXLTerminalRuleCall_1_1_0_2() { return cOpOP700XFXLTerminalRuleCall_1_1_0_2; }
		
		//right=Expression600xfy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression600xfy
		public RuleCall getRightExpression600xfyParserRuleCall_1_2_0() { return cRightExpression600xfyParserRuleCall_1_2_0; }
	}
	public class Expression600xfyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Expression600xfy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression500yfxParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPrologExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP600XFYTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression600xfyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression600xfy PrologExpression:
		//	Expression500yfx ({PrologExpression.left=current} op=OP600XFY right=Expression600xfy)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression500yfx ({PrologExpression.left=current} op=OP600XFY right=Expression600xfy)?
		public Group getGroup() { return cGroup; }
		
		//Expression500yfx
		public RuleCall getExpression500yfxParserRuleCall_0() { return cExpression500yfxParserRuleCall_0; }
		
		//({PrologExpression.left=current} op=OP600XFY right=Expression600xfy)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrologExpression.left=current}
		public Action getPrologExpressionLeftAction_1_0() { return cPrologExpressionLeftAction_1_0; }
		
		//op=OP600XFY
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OP600XFY
		public RuleCall getOpOP600XFYTerminalRuleCall_1_1_0() { return cOpOP600XFYTerminalRuleCall_1_1_0; }
		
		//right=Expression600xfy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression600xfy
		public RuleCall getRightExpression600xfyParserRuleCall_1_2_0() { return cRightExpression600xfyParserRuleCall_1_2_0; }
	}
	public class Expression500yfxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Expression500yfx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression400yfxParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPrologExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP500YFXTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression400yfxParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression500yfx PrologExpression:
		//	Expression400yfx ({PrologExpression.left=current} op=OP500YFX right=Expression400yfx)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression400yfx ({PrologExpression.left=current} op=OP500YFX right=Expression400yfx)*
		public Group getGroup() { return cGroup; }
		
		//Expression400yfx
		public RuleCall getExpression400yfxParserRuleCall_0() { return cExpression400yfxParserRuleCall_0; }
		
		//({PrologExpression.left=current} op=OP500YFX right=Expression400yfx)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrologExpression.left=current}
		public Action getPrologExpressionLeftAction_1_0() { return cPrologExpressionLeftAction_1_0; }
		
		//op=OP500YFX
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OP500YFX
		public RuleCall getOpOP500YFXTerminalRuleCall_1_1_0() { return cOpOP500YFXTerminalRuleCall_1_1_0; }
		
		//right=Expression400yfx
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression400yfx
		public RuleCall getRightExpression400yfxParserRuleCall_1_2_0() { return cRightExpression400yfxParserRuleCall_1_2_0; }
	}
	public class Expression400yfxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Expression400yfx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression200xfxParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPrologExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP400YFXTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression200xfxParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////Expression500fx returns UnaryExpression:
		////	(op=OP500FX)? right=Expression400yfx;
		//Expression400yfx PrologExpression:
		//	Expression200xfx ({PrologExpression.left=current} op=OP400YFX right=Expression200xfx)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression200xfx ({PrologExpression.left=current} op=OP400YFX right=Expression200xfx)*
		public Group getGroup() { return cGroup; }
		
		//Expression200xfx
		public RuleCall getExpression200xfxParserRuleCall_0() { return cExpression200xfxParserRuleCall_0; }
		
		//({PrologExpression.left=current} op=OP400YFX right=Expression200xfx)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrologExpression.left=current}
		public Action getPrologExpressionLeftAction_1_0() { return cPrologExpressionLeftAction_1_0; }
		
		//op=OP400YFX
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OP400YFX
		public RuleCall getOpOP400YFXTerminalRuleCall_1_1_0() { return cOpOP400YFXTerminalRuleCall_1_1_0; }
		
		//right=Expression200xfx
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression200xfx
		public RuleCall getRightExpression200xfxParserRuleCall_1_2_0() { return cRightExpression200xfxParserRuleCall_1_2_0; }
	}
	public class Expression200xfxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Expression200xfx");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression200xfyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPrologExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP200XFXTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression200xfyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression200xfx PrologExpression:
		//	Expression200xfy ({PrologExpression.left=current} op=OP200XFX right=Expression200xfy)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression200xfy ({PrologExpression.left=current} op=OP200XFX right=Expression200xfy)?
		public Group getGroup() { return cGroup; }
		
		//Expression200xfy
		public RuleCall getExpression200xfyParserRuleCall_0() { return cExpression200xfyParserRuleCall_0; }
		
		//({PrologExpression.left=current} op=OP200XFX right=Expression200xfy)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrologExpression.left=current}
		public Action getPrologExpressionLeftAction_1_0() { return cPrologExpressionLeftAction_1_0; }
		
		//op=OP200XFX
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OP200XFX
		public RuleCall getOpOP200XFXTerminalRuleCall_1_1_0() { return cOpOP200XFXTerminalRuleCall_1_1_0; }
		
		//right=Expression200xfy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression200xfy
		public RuleCall getRightExpression200xfyParserRuleCall_1_2_0() { return cRightExpression200xfyParserRuleCall_1_2_0; }
	}
	public class Expression200xfyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Expression200xfy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression0ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPrologExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOP200XFYTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression200xfyParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression200xfy PrologExpression:
		//	Expression0 ({PrologExpression.left=current} op=OP200XFY right=Expression200xfy)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression0 ({PrologExpression.left=current} op=OP200XFY right=Expression200xfy)?
		public Group getGroup() { return cGroup; }
		
		//Expression0
		public RuleCall getExpression0ParserRuleCall_0() { return cExpression0ParserRuleCall_0; }
		
		//({PrologExpression.left=current} op=OP200XFY right=Expression200xfy)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrologExpression.left=current}
		public Action getPrologExpressionLeftAction_1_0() { return cPrologExpressionLeftAction_1_0; }
		
		//op=OP200XFY
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//OP200XFY
		public RuleCall getOpOP200XFYTerminalRuleCall_1_1_0() { return cOpOP200XFYTerminalRuleCall_1_1_0; }
		
		//right=Expression200xfy
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression200xfy
		public RuleCall getRightExpression200xfyParserRuleCall_1_2_0() { return cRightExpression200xfyParserRuleCall_1_2_0; }
	}
	public class Expression0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Expression0");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAtomExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cAtomAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAtomATOMSParserRuleCall_0_1_0 = (RuleCall)cAtomAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cTermsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cTermsExpressionInfinityParserRuleCall_0_2_1_0 = (RuleCall)cTermsAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVariableExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameVARIABLETerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cNumberExpressionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueNUMBERParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cListExpressionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Assignment cHeadAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cHeadExpressionInfinityParserRuleCall_4_2_0_0 = (RuleCall)cHeadAssignment_4_2_0.eContents().get(0);
		private final Group cGroup_4_2_1 = (Group)cGroup_4_2.eContents().get(1);
		private final Keyword cVerticalLineKeyword_4_2_1_0 = (Keyword)cGroup_4_2_1.eContents().get(0);
		private final Assignment cTailAssignment_4_2_1_1 = (Assignment)cGroup_4_2_1.eContents().get(1);
		private final RuleCall cTailExpressionInfinityParserRuleCall_4_2_1_1_0 = (RuleCall)cTailAssignment_4_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cExpressionInfinityParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//Expression0 PrologExpression:
		//	{AtomExpression} atom=ATOMS ('(' terms=ExpressionInfinity ')')?
		//	| {VariableExpression} name=VARIABLE
		//	| {StringExpression} value=STRING
		//	| {NumberExpression} value=NUMBER
		//	| {ListExpression} '[' (head=ExpressionInfinity ('|' tail=ExpressionInfinity)?)? ']'
		//	| '(' ExpressionInfinity ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{AtomExpression} atom=ATOMS ('(' terms=ExpressionInfinity ')')? | {VariableExpression} name=VARIABLE |
		//{StringExpression} value=STRING | {NumberExpression} value=NUMBER | {ListExpression} '[' (head=ExpressionInfinity ('|'
		//tail=ExpressionInfinity)?)? ']' | '(' ExpressionInfinity ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{AtomExpression} atom=ATOMS ('(' terms=ExpressionInfinity ')')?
		public Group getGroup_0() { return cGroup_0; }
		
		//{AtomExpression}
		public Action getAtomExpressionAction_0_0() { return cAtomExpressionAction_0_0; }
		
		//atom=ATOMS
		public Assignment getAtomAssignment_0_1() { return cAtomAssignment_0_1; }
		
		//ATOMS
		public RuleCall getAtomATOMSParserRuleCall_0_1_0() { return cAtomATOMSParserRuleCall_0_1_0; }
		
		//('(' terms=ExpressionInfinity ')')?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2_0() { return cLeftParenthesisKeyword_0_2_0; }
		
		//terms=ExpressionInfinity
		public Assignment getTermsAssignment_0_2_1() { return cTermsAssignment_0_2_1; }
		
		//ExpressionInfinity
		public RuleCall getTermsExpressionInfinityParserRuleCall_0_2_1_0() { return cTermsExpressionInfinityParserRuleCall_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2_2() { return cRightParenthesisKeyword_0_2_2; }
		
		//{VariableExpression} name=VARIABLE
		public Group getGroup_1() { return cGroup_1; }
		
		//{VariableExpression}
		public Action getVariableExpressionAction_1_0() { return cVariableExpressionAction_1_0; }
		
		//name=VARIABLE
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//VARIABLE
		public RuleCall getNameVARIABLETerminalRuleCall_1_1_0() { return cNameVARIABLETerminalRuleCall_1_1_0; }
		
		//{StringExpression} value=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{StringExpression}
		public Action getStringExpressionAction_2_0() { return cStringExpressionAction_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
		
		//{NumberExpression} value=NUMBER
		public Group getGroup_3() { return cGroup_3; }
		
		//{NumberExpression}
		public Action getNumberExpressionAction_3_0() { return cNumberExpressionAction_3_0; }
		
		//value=NUMBER
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//NUMBER
		public RuleCall getValueNUMBERParserRuleCall_3_1_0() { return cValueNUMBERParserRuleCall_3_1_0; }
		
		//{ListExpression} '[' (head=ExpressionInfinity ('|' tail=ExpressionInfinity)?)? ']'
		public Group getGroup_4() { return cGroup_4; }
		
		//{ListExpression}
		public Action getListExpressionAction_4_0() { return cListExpressionAction_4_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_1() { return cLeftSquareBracketKeyword_4_1; }
		
		//(head=ExpressionInfinity ('|' tail=ExpressionInfinity)?)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//head=ExpressionInfinity
		public Assignment getHeadAssignment_4_2_0() { return cHeadAssignment_4_2_0; }
		
		//ExpressionInfinity
		public RuleCall getHeadExpressionInfinityParserRuleCall_4_2_0_0() { return cHeadExpressionInfinityParserRuleCall_4_2_0_0; }
		
		//('|' tail=ExpressionInfinity)?
		public Group getGroup_4_2_1() { return cGroup_4_2_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_4_2_1_0() { return cVerticalLineKeyword_4_2_1_0; }
		
		//tail=ExpressionInfinity
		public Assignment getTailAssignment_4_2_1_1() { return cTailAssignment_4_2_1_1; }
		
		//ExpressionInfinity
		public RuleCall getTailExpressionInfinityParserRuleCall_4_2_1_1_0() { return cTailExpressionInfinityParserRuleCall_4_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
		
		//'(' ExpressionInfinity ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//ExpressionInfinity
		public RuleCall getExpressionInfinityParserRuleCall_5_1() { return cExpressionInfinityParserRuleCall_5_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}
	public class TraceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.TraceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTraceExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTrace_expressionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIdKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Assignment cBodyLAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final Keyword cBodyLBodyKeyword_5_0_0_0 = (Keyword)cBodyLAssignment_5_0_0.eContents().get(0);
		private final Assignment cTermsAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cTermsTermParserRuleCall_5_0_1_0 = (RuleCall)cTermsAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cRolesLAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final Keyword cRolesLRolesKeyword_5_1_0_0 = (Keyword)cRolesLAssignment_5_1_0.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cGroup_5_1.eContents().get(1);
		private final Assignment cRolesAssignment_5_1_1_0 = (Assignment)cGroup_5_1_1.eContents().get(0);
		private final RuleCall cRolesRoleParserRuleCall_5_1_1_0_0 = (RuleCall)cRolesAssignment_5_1_1_0.eContents().get(0);
		private final RuleCall cOP1000XFYTerminalRuleCall_5_1_1_1 = (RuleCall)cGroup_5_1_1.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cAlternatives_5.eContents().get(2);
		private final Assignment cTypesLAssignment_5_2_0 = (Assignment)cGroup_5_2.eContents().get(0);
		private final Keyword cTypesLTypesKeyword_5_2_0_0 = (Keyword)cTypesLAssignment_5_2_0.eContents().get(0);
		private final Assignment cTypesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cTypesEventTypeParserRuleCall_5_2_1_0 = (RuleCall)cTypesAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cAlternatives_5.eContents().get(3);
		private final Assignment cModulesLAssignment_5_3_0 = (Assignment)cGroup_5_3.eContents().get(0);
		private final Keyword cModulesLModulesKeyword_5_3_0_0 = (Keyword)cModulesLAssignment_5_3_0.eContents().get(0);
		private final Assignment cModulesAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cModulesModuleParserRuleCall_5_3_1_0 = (RuleCall)cModulesAssignment_5_3_1.eContents().get(0);
		private final Group cGroup_5_4 = (Group)cAlternatives_5.eContents().get(4);
		private final Assignment cDecentralizedLAssignment_5_4_0 = (Assignment)cGroup_5_4.eContents().get(0);
		private final Keyword cDecentralizedLDecentralizedKeyword_5_4_0_0 = (Keyword)cDecentralizedLAssignment_5_4_0.eContents().get(0);
		private final Assignment cDecentralizedAssignment_5_4_1 = (Assignment)cGroup_5_4.eContents().get(1);
		private final Alternatives cDecentralizedAlternatives_5_4_1_0 = (Alternatives)cDecentralizedAssignment_5_4_1.eContents().get(0);
		private final Keyword cDecentralizedTrueKeyword_5_4_1_0_0 = (Keyword)cDecentralizedAlternatives_5_4_1_0.eContents().get(0);
		private final Keyword cDecentralizedFalseKeyword_5_4_1_0_1 = (Keyword)cDecentralizedAlternatives_5_4_1_0.eContents().get(1);
		private final Group cGroup_5_5 = (Group)cAlternatives_5.eContents().get(5);
		private final Assignment cPartitionLAssignment_5_5_0 = (Assignment)cGroup_5_5.eContents().get(0);
		private final Keyword cPartitionLPartitionKeyword_5_5_0_0 = (Keyword)cPartitionLAssignment_5_5_0.eContents().get(0);
		private final Assignment cPartitionAssignment_5_5_1 = (Assignment)cGroup_5_5.eContents().get(1);
		private final RuleCall cPartitionPartitionParserRuleCall_5_5_1_0 = (RuleCall)cPartitionAssignment_5_5_1.eContents().get(0);
		private final Group cGroup_5_6 = (Group)cAlternatives_5.eContents().get(6);
		private final Assignment cConstraintsLAssignment_5_6_0 = (Assignment)cGroup_5_6.eContents().get(0);
		private final Keyword cConstraintsLConstraintsKeyword_5_6_0_0 = (Keyword)cConstraintsLAssignment_5_6_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_5_6_1 = (Assignment)cGroup_5_6.eContents().get(1);
		private final RuleCall cConstraintsConstraintParserRuleCall_5_6_1_0 = (RuleCall)cConstraintsAssignment_5_6_1.eContents().get(0);
		private final Group cGroup_5_7 = (Group)cAlternatives_5.eContents().get(7);
		private final Assignment cGuiLAssignment_5_7_0 = (Assignment)cGroup_5_7.eContents().get(0);
		private final Keyword cGuiLGuiKeyword_5_7_0_0 = (Keyword)cGuiLAssignment_5_7_0.eContents().get(0);
		private final Assignment cGuiAssignment_5_7_1 = (Assignment)cGroup_5_7.eContents().get(1);
		private final Alternatives cGuiAlternatives_5_7_1_0 = (Alternatives)cGuiAssignment_5_7_1.eContents().get(0);
		private final Keyword cGuiTrueKeyword_5_7_1_0_0 = (Keyword)cGuiAlternatives_5_7_1_0.eContents().get(0);
		private final Keyword cGuiFalseKeyword_5_7_1_0_1 = (Keyword)cGuiAlternatives_5_7_1_0.eContents().get(1);
		private final Group cGroup_5_8 = (Group)cAlternatives_5.eContents().get(8);
		private final Assignment cMinimalLAssignment_5_8_0 = (Assignment)cGroup_5_8.eContents().get(0);
		private final Keyword cMinimalLMinimalKeyword_5_8_0_0 = (Keyword)cMinimalLAssignment_5_8_0.eContents().get(0);
		private final Assignment cMinimalAssignment_5_8_1 = (Assignment)cGroup_5_8.eContents().get(1);
		private final Alternatives cMinimalAlternatives_5_8_1_0 = (Alternatives)cMinimalAssignment_5_8_1.eContents().get(0);
		private final Keyword cMinimalTrueKeyword_5_8_1_0_0 = (Keyword)cMinimalAlternatives_5_8_1_0.eContents().get(0);
		private final Keyword cMinimalFalseKeyword_5_8_1_0_1 = (Keyword)cMinimalAlternatives_5_8_1_0.eContents().get(1);
		private final Group cGroup_5_9 = (Group)cAlternatives_5.eContents().get(9);
		private final Assignment cThresholdLAssignment_5_9_0 = (Assignment)cGroup_5_9.eContents().get(0);
		private final Keyword cThresholdLThresholdKeyword_5_9_0_0 = (Keyword)cThresholdLAssignment_5_9_0.eContents().get(0);
		private final Assignment cThresholdAssignment_5_9_1 = (Assignment)cGroup_5_9.eContents().get(1);
		private final RuleCall cThresholdNUMBERParserRuleCall_5_9_1_0 = (RuleCall)cThresholdAssignment_5_9_1.eContents().get(0);
		private final Group cGroup_5_10 = (Group)cAlternatives_5.eContents().get(10);
		private final Assignment cChannelsLAssignment_5_10_0 = (Assignment)cGroup_5_10.eContents().get(0);
		private final Keyword cChannelsLChannelsKeyword_5_10_0_0 = (Keyword)cChannelsLAssignment_5_10_0.eContents().get(0);
		private final Assignment cChannelsAssignment_5_10_1 = (Assignment)cGroup_5_10.eContents().get(1);
		private final RuleCall cChannelsChannelParserRuleCall_5_10_1_0 = (RuleCall)cChannelsAssignment_5_10_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Trace expressions    
		//TraceExpression:
		//	{TraceExpression}
		//	'trace_expression' '{'
		//	'id:' name=ID (bodyL+='body:' terms+=Term+ | rolesL+='roles:' (roles+=Role OP1000XFY?)* | typesL+='types:'
		//	types+=EventType* | modulesL+='modules:' modules+=Module* | decentralizedL+='decentralized:' decentralized+=('true' |
		//	'false') | partitionL+='partition:' partition+=Partition | constraintsL+='constraints:' constraints+=Constraint* |
		//	guiL+='gui:' gui+=('true' | 'false') | minimalL+='minimal:' minimal+=('true' | 'false') | thresholdL+='threshold:'
		//	threshold+=NUMBER | channelsL+='channels:' channels+=Channel+)+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{TraceExpression} 'trace_expression' '{' 'id:' name=ID (bodyL+='body:' terms+=Term+ | rolesL+='roles:' (roles+=Role
		//OP1000XFY?)* | typesL+='types:' types+=EventType* | modulesL+='modules:' modules+=Module* |
		//decentralizedL+='decentralized:' decentralized+=('true' | 'false') | partitionL+='partition:' partition+=Partition |
		//constraintsL+='constraints:' constraints+=Constraint* | guiL+='gui:' gui+=('true' | 'false') | minimalL+='minimal:'
		//minimal+=('true' | 'false') | thresholdL+='threshold:' threshold+=NUMBER | channelsL+='channels:' channels+=Channel+)+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{TraceExpression}
		public Action getTraceExpressionAction_0() { return cTraceExpressionAction_0; }
		
		//'trace_expression'
		public Keyword getTrace_expressionKeyword_1() { return cTrace_expressionKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'id:'
		public Keyword getIdKeyword_3() { return cIdKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDParserRuleCall_4_0() { return cNameIDParserRuleCall_4_0; }
		
		//(bodyL+='body:' terms+=Term+ | rolesL+='roles:' (roles+=Role OP1000XFY?)* | typesL+='types:' types+=EventType* |
		//modulesL+='modules:' modules+=Module* | decentralizedL+='decentralized:' decentralized+=('true' | 'false') |
		//partitionL+='partition:' partition+=Partition | constraintsL+='constraints:' constraints+=Constraint* | guiL+='gui:'
		//gui+=('true' | 'false') | minimalL+='minimal:' minimal+=('true' | 'false') | thresholdL+='threshold:' threshold+=NUMBER
		//| channelsL+='channels:' channels+=Channel+)+
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//bodyL+='body:' terms+=Term+
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//bodyL+='body:'
		public Assignment getBodyLAssignment_5_0_0() { return cBodyLAssignment_5_0_0; }
		
		//'body:'
		public Keyword getBodyLBodyKeyword_5_0_0_0() { return cBodyLBodyKeyword_5_0_0_0; }
		
		//terms+=Term+
		public Assignment getTermsAssignment_5_0_1() { return cTermsAssignment_5_0_1; }
		
		//Term
		public RuleCall getTermsTermParserRuleCall_5_0_1_0() { return cTermsTermParserRuleCall_5_0_1_0; }
		
		//rolesL+='roles:' (roles+=Role OP1000XFY?)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//rolesL+='roles:'
		public Assignment getRolesLAssignment_5_1_0() { return cRolesLAssignment_5_1_0; }
		
		//'roles:'
		public Keyword getRolesLRolesKeyword_5_1_0_0() { return cRolesLRolesKeyword_5_1_0_0; }
		
		//(roles+=Role OP1000XFY?)*
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }
		
		//roles+=Role
		public Assignment getRolesAssignment_5_1_1_0() { return cRolesAssignment_5_1_1_0; }
		
		//Role
		public RuleCall getRolesRoleParserRuleCall_5_1_1_0_0() { return cRolesRoleParserRuleCall_5_1_1_0_0; }
		
		//OP1000XFY?
		public RuleCall getOP1000XFYTerminalRuleCall_5_1_1_1() { return cOP1000XFYTerminalRuleCall_5_1_1_1; }
		
		//typesL+='types:' types+=EventType*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//typesL+='types:'
		public Assignment getTypesLAssignment_5_2_0() { return cTypesLAssignment_5_2_0; }
		
		//'types:'
		public Keyword getTypesLTypesKeyword_5_2_0_0() { return cTypesLTypesKeyword_5_2_0_0; }
		
		//types+=EventType*
		public Assignment getTypesAssignment_5_2_1() { return cTypesAssignment_5_2_1; }
		
		//EventType
		public RuleCall getTypesEventTypeParserRuleCall_5_2_1_0() { return cTypesEventTypeParserRuleCall_5_2_1_0; }
		
		//modulesL+='modules:' modules+=Module*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//modulesL+='modules:'
		public Assignment getModulesLAssignment_5_3_0() { return cModulesLAssignment_5_3_0; }
		
		//'modules:'
		public Keyword getModulesLModulesKeyword_5_3_0_0() { return cModulesLModulesKeyword_5_3_0_0; }
		
		//modules+=Module*
		public Assignment getModulesAssignment_5_3_1() { return cModulesAssignment_5_3_1; }
		
		//Module
		public RuleCall getModulesModuleParserRuleCall_5_3_1_0() { return cModulesModuleParserRuleCall_5_3_1_0; }
		
		//decentralizedL+='decentralized:' decentralized+=('true' | 'false')
		public Group getGroup_5_4() { return cGroup_5_4; }
		
		//decentralizedL+='decentralized:'
		public Assignment getDecentralizedLAssignment_5_4_0() { return cDecentralizedLAssignment_5_4_0; }
		
		//'decentralized:'
		public Keyword getDecentralizedLDecentralizedKeyword_5_4_0_0() { return cDecentralizedLDecentralizedKeyword_5_4_0_0; }
		
		//decentralized+=('true' | 'false')
		public Assignment getDecentralizedAssignment_5_4_1() { return cDecentralizedAssignment_5_4_1; }
		
		//('true' | 'false')
		public Alternatives getDecentralizedAlternatives_5_4_1_0() { return cDecentralizedAlternatives_5_4_1_0; }
		
		//'true'
		public Keyword getDecentralizedTrueKeyword_5_4_1_0_0() { return cDecentralizedTrueKeyword_5_4_1_0_0; }
		
		//'false'
		public Keyword getDecentralizedFalseKeyword_5_4_1_0_1() { return cDecentralizedFalseKeyword_5_4_1_0_1; }
		
		//partitionL+='partition:' partition+=Partition
		public Group getGroup_5_5() { return cGroup_5_5; }
		
		//partitionL+='partition:'
		public Assignment getPartitionLAssignment_5_5_0() { return cPartitionLAssignment_5_5_0; }
		
		//'partition:'
		public Keyword getPartitionLPartitionKeyword_5_5_0_0() { return cPartitionLPartitionKeyword_5_5_0_0; }
		
		//partition+=Partition
		public Assignment getPartitionAssignment_5_5_1() { return cPartitionAssignment_5_5_1; }
		
		//Partition
		public RuleCall getPartitionPartitionParserRuleCall_5_5_1_0() { return cPartitionPartitionParserRuleCall_5_5_1_0; }
		
		//constraintsL+='constraints:' constraints+=Constraint*
		public Group getGroup_5_6() { return cGroup_5_6; }
		
		//constraintsL+='constraints:'
		public Assignment getConstraintsLAssignment_5_6_0() { return cConstraintsLAssignment_5_6_0; }
		
		//'constraints:'
		public Keyword getConstraintsLConstraintsKeyword_5_6_0_0() { return cConstraintsLConstraintsKeyword_5_6_0_0; }
		
		//constraints+=Constraint*
		public Assignment getConstraintsAssignment_5_6_1() { return cConstraintsAssignment_5_6_1; }
		
		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_5_6_1_0() { return cConstraintsConstraintParserRuleCall_5_6_1_0; }
		
		//guiL+='gui:' gui+=('true' | 'false')
		public Group getGroup_5_7() { return cGroup_5_7; }
		
		//guiL+='gui:'
		public Assignment getGuiLAssignment_5_7_0() { return cGuiLAssignment_5_7_0; }
		
		//'gui:'
		public Keyword getGuiLGuiKeyword_5_7_0_0() { return cGuiLGuiKeyword_5_7_0_0; }
		
		//gui+=('true' | 'false')
		public Assignment getGuiAssignment_5_7_1() { return cGuiAssignment_5_7_1; }
		
		//('true' | 'false')
		public Alternatives getGuiAlternatives_5_7_1_0() { return cGuiAlternatives_5_7_1_0; }
		
		//'true'
		public Keyword getGuiTrueKeyword_5_7_1_0_0() { return cGuiTrueKeyword_5_7_1_0_0; }
		
		//'false'
		public Keyword getGuiFalseKeyword_5_7_1_0_1() { return cGuiFalseKeyword_5_7_1_0_1; }
		
		//minimalL+='minimal:' minimal+=('true' | 'false')
		public Group getGroup_5_8() { return cGroup_5_8; }
		
		//minimalL+='minimal:'
		public Assignment getMinimalLAssignment_5_8_0() { return cMinimalLAssignment_5_8_0; }
		
		//'minimal:'
		public Keyword getMinimalLMinimalKeyword_5_8_0_0() { return cMinimalLMinimalKeyword_5_8_0_0; }
		
		//minimal+=('true' | 'false')
		public Assignment getMinimalAssignment_5_8_1() { return cMinimalAssignment_5_8_1; }
		
		//('true' | 'false')
		public Alternatives getMinimalAlternatives_5_8_1_0() { return cMinimalAlternatives_5_8_1_0; }
		
		//'true'
		public Keyword getMinimalTrueKeyword_5_8_1_0_0() { return cMinimalTrueKeyword_5_8_1_0_0; }
		
		//'false'
		public Keyword getMinimalFalseKeyword_5_8_1_0_1() { return cMinimalFalseKeyword_5_8_1_0_1; }
		
		//thresholdL+='threshold:' threshold+=NUMBER
		public Group getGroup_5_9() { return cGroup_5_9; }
		
		//thresholdL+='threshold:'
		public Assignment getThresholdLAssignment_5_9_0() { return cThresholdLAssignment_5_9_0; }
		
		//'threshold:'
		public Keyword getThresholdLThresholdKeyword_5_9_0_0() { return cThresholdLThresholdKeyword_5_9_0_0; }
		
		//threshold+=NUMBER
		public Assignment getThresholdAssignment_5_9_1() { return cThresholdAssignment_5_9_1; }
		
		//NUMBER
		public RuleCall getThresholdNUMBERParserRuleCall_5_9_1_0() { return cThresholdNUMBERParserRuleCall_5_9_1_0; }
		
		//channelsL+='channels:' channels+=Channel+
		public Group getGroup_5_10() { return cGroup_5_10; }
		
		//channelsL+='channels:'
		public Assignment getChannelsLAssignment_5_10_0() { return cChannelsLAssignment_5_10_0; }
		
		//'channels:'
		public Keyword getChannelsLChannelsKeyword_5_10_0_0() { return cChannelsLChannelsKeyword_5_10_0_0; }
		
		//channels+=Channel+
		public Assignment getChannelsAssignment_5_10_1() { return cChannelsAssignment_5_10_1; }
		
		//Channel
		public RuleCall getChannelsChannelParserRuleCall_5_10_1_0() { return cChannelsChannelParserRuleCall_5_10_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprShuffleExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//Term:
		//	name=ID '<-' expr=ShuffleExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '<-' expr=ShuffleExpr
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDParserRuleCall_0_0() { return cNameIDParserRuleCall_0_0; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }
		
		//expr=ShuffleExpr
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//ShuffleExpr
		public RuleCall getExprShuffleExprParserRuleCall_2_0() { return cExprShuffleExprParserRuleCall_2_0; }
	}
	public class ShuffleExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.ShuffleExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnionExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cShuffleExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorVerticalLineKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnionExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ShuffleExpr Expression:
		//	UnionExpr ({ShuffleExpr.left=current} => operator='|' right=UnionExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnionExpr ({ShuffleExpr.left=current} => operator='|' right=UnionExpr)*
		public Group getGroup() { return cGroup; }
		
		//UnionExpr
		public RuleCall getUnionExprParserRuleCall_0() { return cUnionExprParserRuleCall_0; }
		
		//({ShuffleExpr.left=current} => operator='|' right=UnionExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ShuffleExpr.left=current}
		public Action getShuffleExprLeftAction_1_0() { return cShuffleExprLeftAction_1_0; }
		
		//=> operator='|'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'|'
		public Keyword getOperatorVerticalLineKeyword_1_1_0() { return cOperatorVerticalLineKeyword_1_1_0; }
		
		//right=UnionExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//UnionExpr
		public RuleCall getRightUnionExprParserRuleCall_1_2_0() { return cRightUnionExprParserRuleCall_1_2_0; }
	}
	public class UnionExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.UnionExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cUnionExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorReverseSolidusSolidusKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//UnionExpr Expression:
		//	AndExpr ({UnionExpr.left=current} => operator='\\/' right=AndExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpr ({UnionExpr.left=current} => operator='\\/' right=AndExpr)*
		public Group getGroup() { return cGroup; }
		
		//AndExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }
		
		//({UnionExpr.left=current} => operator='\\/' right=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnionExpr.left=current}
		public Action getUnionExprLeftAction_1_0() { return cUnionExprLeftAction_1_0; }
		
		//=> operator='\\/'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'\\/'
		public Keyword getOperatorReverseSolidusSolidusKeyword_1_1_0() { return cOperatorReverseSolidusSolidusKeyword_1_1_0; }
		
		//right=AndExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpr
		public RuleCall getRightAndExprParserRuleCall_1_2_0() { return cRightAndExprParserRuleCall_1_2_0; }
	}
	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCatExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorSolidusReverseSolidusKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightCatExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpr Expression:
		//	CatExpr ({AndExpr.left=current} => operator='/\\' right=CatExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CatExpr ({AndExpr.left=current} => operator='/\\' right=CatExpr)*
		public Group getGroup() { return cGroup; }
		
		//CatExpr
		public RuleCall getCatExprParserRuleCall_0() { return cCatExprParserRuleCall_0; }
		
		//({AndExpr.left=current} => operator='/\\' right=CatExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpr.left=current}
		public Action getAndExprLeftAction_1_0() { return cAndExprLeftAction_1_0; }
		
		//=> operator='/\\'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'/\\'
		public Keyword getOperatorSolidusReverseSolidusKeyword_1_1_0() { return cOperatorSolidusReverseSolidusKeyword_1_1_0; }
		
		//right=CatExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//CatExpr
		public RuleCall getRightCatExprParserRuleCall_1_2_0() { return cRightCatExprParserRuleCall_1_2_0; }
	}
	public class CatExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.CatExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCatExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAsteriskKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//CatExpr Expression:
		//	Primary ({CatExpr.left=current} => operator='*' right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({CatExpr.left=current} => operator='*' right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({CatExpr.left=current} => operator='*' right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{CatExpr.left=current}
		public Action getCatExprLeftAction_1_0() { return cCatExprLeftAction_1_0; }
		
		//=> operator='*'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'*'
		public Keyword getOperatorAsteriskKeyword_1_1_0() { return cOperatorAsteriskKeyword_1_1_0; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSeqExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cSeqExprAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSeqExprSeqExprParserRuleCall_0_1_0 = (RuleCall)cSeqExprAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFilterExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFilterExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFilterExprFilterExprParserRuleCall_1_1_0 = (RuleCall)cFilterExprAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cVarExprAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cVarExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVarExprVarExprParserRuleCall_2_1_0 = (RuleCall)cVarExprAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cTerminalExprAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cTerminalExprAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTerminalExprTerminalExprParserRuleCall_3_1_0 = (RuleCall)cTerminalExprAssignment_3_1.eContents().get(0);
		
		//Primary Expression:
		//	{SeqExpr} seqExpr=SeqExpr | {FilterExpr} filterExpr=FilterExpr | {VarExpr} varExpr=VarExpr | {TerminalExpr}
		//	terminalExpr=TerminalExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//{SeqExpr} seqExpr=SeqExpr | {FilterExpr} filterExpr=FilterExpr | {VarExpr} varExpr=VarExpr | {TerminalExpr}
		//terminalExpr=TerminalExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SeqExpr} seqExpr=SeqExpr
		public Group getGroup_0() { return cGroup_0; }
		
		//{SeqExpr}
		public Action getSeqExprAction_0_0() { return cSeqExprAction_0_0; }
		
		//seqExpr=SeqExpr
		public Assignment getSeqExprAssignment_0_1() { return cSeqExprAssignment_0_1; }
		
		//SeqExpr
		public RuleCall getSeqExprSeqExprParserRuleCall_0_1_0() { return cSeqExprSeqExprParserRuleCall_0_1_0; }
		
		//{FilterExpr} filterExpr=FilterExpr
		public Group getGroup_1() { return cGroup_1; }
		
		//{FilterExpr}
		public Action getFilterExprAction_1_0() { return cFilterExprAction_1_0; }
		
		//filterExpr=FilterExpr
		public Assignment getFilterExprAssignment_1_1() { return cFilterExprAssignment_1_1; }
		
		//FilterExpr
		public RuleCall getFilterExprFilterExprParserRuleCall_1_1_0() { return cFilterExprFilterExprParserRuleCall_1_1_0; }
		
		//{VarExpr} varExpr=VarExpr
		public Group getGroup_2() { return cGroup_2; }
		
		//{VarExpr}
		public Action getVarExprAction_2_0() { return cVarExprAction_2_0; }
		
		//varExpr=VarExpr
		public Assignment getVarExprAssignment_2_1() { return cVarExprAssignment_2_1; }
		
		//VarExpr
		public RuleCall getVarExprVarExprParserRuleCall_2_1_0() { return cVarExprVarExprParserRuleCall_2_1_0; }
		
		//{TerminalExpr} terminalExpr=TerminalExpr
		public Group getGroup_3() { return cGroup_3; }
		
		//{TerminalExpr}
		public Action getTerminalExprAction_3_0() { return cTerminalExprAction_3_0; }
		
		//terminalExpr=TerminalExpr
		public Assignment getTerminalExprAssignment_3_1() { return cTerminalExprAssignment_3_1; }
		
		//TerminalExpr
		public RuleCall getTerminalExprTerminalExprParserRuleCall_3_1_0() { return cTerminalExprTerminalExprParserRuleCall_3_1_0; }
	}
	public class VarExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.VarExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOP700XFXLTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVARIABLETerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cOP1000XFYTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cBodyVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyVarPrimaryParserRuleCall_3_0 = (RuleCall)cBodyVarAssignment_3.eContents().get(0);
		private final RuleCall cOP700XFXRTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//VarExpr Expression:
		//	OP700XFXL variable=VARIABLE OP1000XFY bodyVar=Primary OP700XFXR;
		@Override public ParserRule getRule() { return rule; }
		
		//OP700XFXL variable=VARIABLE OP1000XFY bodyVar=Primary OP700XFXR
		public Group getGroup() { return cGroup; }
		
		//OP700XFXL
		public RuleCall getOP700XFXLTerminalRuleCall_0() { return cOP700XFXLTerminalRuleCall_0; }
		
		//variable=VARIABLE
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//VARIABLE
		public RuleCall getVariableVARIABLETerminalRuleCall_1_0() { return cVariableVARIABLETerminalRuleCall_1_0; }
		
		//OP1000XFY
		public RuleCall getOP1000XFYTerminalRuleCall_2() { return cOP1000XFYTerminalRuleCall_2; }
		
		//bodyVar=Primary
		public Assignment getBodyVarAssignment_3() { return cBodyVarAssignment_3; }
		
		//Primary
		public RuleCall getBodyVarPrimaryParserRuleCall_3_0() { return cBodyVarPrimaryParserRuleCall_3_0; }
		
		//OP700XFXR
		public RuleCall getOP700XFXRTerminalRuleCall_4() { return cOP700XFXRTerminalRuleCall_4; }
	}
	public class FilterExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.FilterExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeFilterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeFilterEventTypeCrossReference_0_0 = (CrossReference)cTypeFilterAssignment_0.eContents().get(0);
		private final RuleCall cTypeFilterEventTypeIDParserRuleCall_0_0_1 = (RuleCall)cTypeFilterEventTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFirstAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFirstExpression0ParserRuleCall_1_1_0 = (RuleCall)cFirstAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cOP1000XFYTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cExprsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExprsExpression0ParserRuleCall_1_2_1_0 = (RuleCall)cExprsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorOP400FX1TerminalRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cBodyFilterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyFilterPrimaryParserRuleCall_3_0 = (RuleCall)cBodyFilterAssignment_3.eContents().get(0);
		
		//FilterExpr Expression:
		//	typeFilter=[EventType] ('(' first=Expression0 (OP1000XFY exprs+=Expression0)* ')')? operator=OP400FX1
		//	bodyFilter=Primary;
		@Override public ParserRule getRule() { return rule; }
		
		//typeFilter=[EventType] ('(' first=Expression0 (OP1000XFY exprs+=Expression0)* ')')? operator=OP400FX1 bodyFilter=Primary
		public Group getGroup() { return cGroup; }
		
		//typeFilter=[EventType]
		public Assignment getTypeFilterAssignment_0() { return cTypeFilterAssignment_0; }
		
		//[EventType]
		public CrossReference getTypeFilterEventTypeCrossReference_0_0() { return cTypeFilterEventTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeFilterEventTypeIDParserRuleCall_0_0_1() { return cTypeFilterEventTypeIDParserRuleCall_0_0_1; }
		
		//('(' first=Expression0 (OP1000XFY exprs+=Expression0)* ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//first=Expression0
		public Assignment getFirstAssignment_1_1() { return cFirstAssignment_1_1; }
		
		//Expression0
		public RuleCall getFirstExpression0ParserRuleCall_1_1_0() { return cFirstExpression0ParserRuleCall_1_1_0; }
		
		//(OP1000XFY exprs+=Expression0)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//OP1000XFY
		public RuleCall getOP1000XFYTerminalRuleCall_1_2_0() { return cOP1000XFYTerminalRuleCall_1_2_0; }
		
		//exprs+=Expression0
		public Assignment getExprsAssignment_1_2_1() { return cExprsAssignment_1_2_1; }
		
		//Expression0
		public RuleCall getExprsExpression0ParserRuleCall_1_2_1_0() { return cExprsExpression0ParserRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//operator=OP400FX1
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//OP400FX1
		public RuleCall getOperatorOP400FX1TerminalRuleCall_2_0() { return cOperatorOP400FX1TerminalRuleCall_2_0; }
		
		//bodyFilter=Primary
		public Assignment getBodyFilterAssignment_3() { return cBodyFilterAssignment_3; }
		
		//Primary
		public RuleCall getBodyFilterPrimaryParserRuleCall_3_0() { return cBodyFilterPrimaryParserRuleCall_3_0; }
	}
	public class SeqExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.SeqExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeSeqAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeSeqEventTypeCrossReference_0_0 = (CrossReference)cTypeSeqAssignment_0.eContents().get(0);
		private final RuleCall cTypeSeqEventTypeIDParserRuleCall_0_0_1 = (RuleCall)cTypeSeqEventTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFirstAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFirstExpression0ParserRuleCall_1_1_0 = (RuleCall)cFirstAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cOP1000XFYTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cExprsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExprsExpression0ParserRuleCall_1_2_1_0 = (RuleCall)cExprsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorOP600XFYTerminalRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cBodySeqAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodySeqPrimaryParserRuleCall_3_0 = (RuleCall)cBodySeqAssignment_3.eContents().get(0);
		
		//SeqExpr Expression:
		//	typeSeq=[EventType] ('(' first=Expression0 (OP1000XFY exprs+=Expression0)* ')')? operator=OP600XFY bodySeq=Primary;
		@Override public ParserRule getRule() { return rule; }
		
		//typeSeq=[EventType] ('(' first=Expression0 (OP1000XFY exprs+=Expression0)* ')')? operator=OP600XFY bodySeq=Primary
		public Group getGroup() { return cGroup; }
		
		//typeSeq=[EventType]
		public Assignment getTypeSeqAssignment_0() { return cTypeSeqAssignment_0; }
		
		//[EventType]
		public CrossReference getTypeSeqEventTypeCrossReference_0_0() { return cTypeSeqEventTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeSeqEventTypeIDParserRuleCall_0_0_1() { return cTypeSeqEventTypeIDParserRuleCall_0_0_1; }
		
		//('(' first=Expression0 (OP1000XFY exprs+=Expression0)* ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//first=Expression0
		public Assignment getFirstAssignment_1_1() { return cFirstAssignment_1_1; }
		
		//Expression0
		public RuleCall getFirstExpression0ParserRuleCall_1_1_0() { return cFirstExpression0ParserRuleCall_1_1_0; }
		
		//(OP1000XFY exprs+=Expression0)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//OP1000XFY
		public RuleCall getOP1000XFYTerminalRuleCall_1_2_0() { return cOP1000XFYTerminalRuleCall_1_2_0; }
		
		//exprs+=Expression0
		public Assignment getExprsAssignment_1_2_1() { return cExprsAssignment_1_2_1; }
		
		//Expression0
		public RuleCall getExprsExpression0ParserRuleCall_1_2_1_0() { return cExprsExpression0ParserRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//operator=OP600XFY
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//OP600XFY
		public RuleCall getOperatorOP600XFYTerminalRuleCall_2_0() { return cOperatorOP600XFYTerminalRuleCall_2_0; }
		
		//bodySeq=Primary
		public Assignment getBodySeqAssignment_3() { return cBodySeqAssignment_3; }
		
		//Primary
		public RuleCall getBodySeqPrimaryParserRuleCall_3_0() { return cBodySeqPrimaryParserRuleCall_3_0; }
	}
	public class TerminalExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.TerminalExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEpsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cEpsEpsilonKeyword_0_0 = (Keyword)cEpsAssignment_0.eContents().get(0);
		private final Assignment cTermAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cTermTermCrossReference_1_0 = (CrossReference)cTermAssignment_1.eContents().get(0);
		private final RuleCall cTermTermIDParserRuleCall_1_0_1 = (RuleCall)cTermTermCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprShuffleExprParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//TerminalExpr Expression:
		//	eps='epsilon' | term=[Term] | '(' expr=ShuffleExpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//eps='epsilon' | term=[Term] | '(' expr=ShuffleExpr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//eps='epsilon'
		public Assignment getEpsAssignment_0() { return cEpsAssignment_0; }
		
		//'epsilon'
		public Keyword getEpsEpsilonKeyword_0_0() { return cEpsEpsilonKeyword_0_0; }
		
		//term=[Term]
		public Assignment getTermAssignment_1() { return cTermAssignment_1; }
		
		//[Term]
		public CrossReference getTermTermCrossReference_1_0() { return cTermTermCrossReference_1_0; }
		
		//ID
		public RuleCall getTermTermIDParserRuleCall_1_0_1() { return cTermTermIDParserRuleCall_1_0_1; }
		
		//'(' expr=ShuffleExpr ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//expr=ShuffleExpr
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }
		
		//ShuffleExpr
		public RuleCall getExprShuffleExprParserRuleCall_2_1_0() { return cExprShuffleExprParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class EventTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.EventType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprExpression0ParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cOP1000XFYTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cExprsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExprsExpression0ParserRuleCall_1_2_1_0 = (RuleCall)cExprsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final RuleCall cOP600XFYTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMsgsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMsgsMsgParserRuleCall_4_0 = (RuleCall)cMsgsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cChannelAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cChannelChannelCrossReference_6_1_0 = (CrossReference)cChannelAssignment_6_1.eContents().get(0);
		private final RuleCall cChannelChannelIDParserRuleCall_6_1_0_1 = (RuleCall)cChannelChannelCrossReference_6_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//EventType:
		//	name=ID ('(' expr=Expression0 (OP1000XFY exprs+=Expression0)* ')')? OP600XFY '{' msgs+=Msg* '}' ('[' channel=[Channel]
		//	']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('(' expr=Expression0 (OP1000XFY exprs+=Expression0)* ')')? OP600XFY '{' msgs+=Msg* '}' ('[' channel=[Channel]
		//']')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDParserRuleCall_0_0() { return cNameIDParserRuleCall_0_0; }
		
		//('(' expr=Expression0 (OP1000XFY exprs+=Expression0)* ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//expr=Expression0
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//Expression0
		public RuleCall getExprExpression0ParserRuleCall_1_1_0() { return cExprExpression0ParserRuleCall_1_1_0; }
		
		//(OP1000XFY exprs+=Expression0)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//OP1000XFY
		public RuleCall getOP1000XFYTerminalRuleCall_1_2_0() { return cOP1000XFYTerminalRuleCall_1_2_0; }
		
		//exprs+=Expression0
		public Assignment getExprsAssignment_1_2_1() { return cExprsAssignment_1_2_1; }
		
		//Expression0
		public RuleCall getExprsExpression0ParserRuleCall_1_2_1_0() { return cExprsExpression0ParserRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//OP600XFY
		public RuleCall getOP600XFYTerminalRuleCall_2() { return cOP600XFYTerminalRuleCall_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//msgs+=Msg*
		public Assignment getMsgsAssignment_4() { return cMsgsAssignment_4; }
		
		//Msg
		public RuleCall getMsgsMsgParserRuleCall_4_0() { return cMsgsMsgParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//('[' channel=[Channel] ']')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }
		
		//channel=[Channel]
		public Assignment getChannelAssignment_6_1() { return cChannelAssignment_6_1; }
		
		//[Channel]
		public CrossReference getChannelChannelCrossReference_6_1_0() { return cChannelChannelCrossReference_6_1_0; }
		
		//ID
		public RuleCall getChannelChannelIDParserRuleCall_6_1_0_1() { return cChannelChannelIDParserRuleCall_6_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6_2() { return cRightSquareBracketKeyword_6_2; }
	}
	public class MsgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Msg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cAsync_senderAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final CrossReference cAsync_senderRoleCrossReference_0_0_1_0 = (CrossReference)cAsync_senderAssignment_0_0_1.eContents().get(0);
		private final RuleCall cAsync_senderRoleIDParserRuleCall_0_0_1_0_1 = (RuleCall)cAsync_senderRoleCrossReference_0_0_1_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_0_0_3 = (Keyword)cGroup_0_0.eContents().get(3);
		private final Assignment cReceiverAssignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final CrossReference cReceiverRoleCrossReference_0_0_4_0 = (CrossReference)cReceiverAssignment_0_0_4.eContents().get(0);
		private final RuleCall cReceiverRoleIDParserRuleCall_0_0_4_0_1 = (RuleCall)cReceiverRoleCrossReference_0_0_4_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cSenderAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final CrossReference cSenderRoleCrossReference_0_1_0_0 = (CrossReference)cSenderAssignment_0_1_0.eContents().get(0);
		private final RuleCall cSenderRoleIDParserRuleCall_0_1_0_0_1 = (RuleCall)cSenderRoleCrossReference_0_1_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cAsync_receiverAssignment_0_1_3 = (Assignment)cGroup_0_1.eContents().get(3);
		private final CrossReference cAsync_receiverRoleCrossReference_0_1_3_0 = (CrossReference)cAsync_receiverAssignment_0_1_3.eContents().get(0);
		private final RuleCall cAsync_receiverRoleIDParserRuleCall_0_1_3_0_1 = (RuleCall)cAsync_receiverRoleCrossReference_0_1_3_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_1_4 = (Keyword)cGroup_0_1.eContents().get(4);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Assignment cSenderAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final CrossReference cSenderRoleCrossReference_0_2_0_0 = (CrossReference)cSenderAssignment_0_2_0.eContents().get(0);
		private final RuleCall cSenderRoleIDParserRuleCall_0_2_0_0_1 = (RuleCall)cSenderRoleCrossReference_0_2_0_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Assignment cReceiverAssignment_0_2_2 = (Assignment)cGroup_0_2.eContents().get(2);
		private final CrossReference cReceiverRoleCrossReference_0_2_2_0 = (CrossReference)cReceiverAssignment_0_2_2.eContents().get(0);
		private final RuleCall cReceiverRoleIDParserRuleCall_0_2_2_0_1 = (RuleCall)cReceiverRoleCrossReference_0_2_2_0.eContents().get(1);
		private final RuleCall cOP600XFYTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cPerformativeAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cPerformativeATOMTerminalRuleCall_2_0_0_0 = (RuleCall)cPerformativeAssignment_2_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cContentAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cContentExpression0ParserRuleCall_2_0_2_0 = (RuleCall)cContentAssignment_2_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Assignment cContentAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cContentExpression0ParserRuleCall_2_1_0 = (RuleCall)cContentAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionsExpressionInfinityParserRuleCall_3_1_0 = (RuleCall)cConditionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Msg:
		//	('[' async_sender=[Role] '=>' ']' receiver=[Role] | sender=[Role] '[' '=>' async_receiver=[Role] ']' | sender=[Role]
		//	'=>' receiver=[Role]) OP600XFY (performative=ATOM '(' content=Expression0 ')' | content=Expression0) ('['
		//	conditions=ExpressionInfinity ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//('[' async_sender=[Role] '=>' ']' receiver=[Role] | sender=[Role] '[' '=>' async_receiver=[Role] ']' | sender=[Role]
		//'=>' receiver=[Role]) OP600XFY (performative=ATOM '(' content=Expression0 ')' | content=Expression0) ('['
		//conditions=ExpressionInfinity ']')?
		public Group getGroup() { return cGroup; }
		
		//'[' async_sender=[Role] '=>' ']' receiver=[Role] | sender=[Role] '[' '=>' async_receiver=[Role] ']' | sender=[Role] '=>'
		//receiver=[Role]
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'[' async_sender=[Role] '=>' ']' receiver=[Role]
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0_0() { return cLeftSquareBracketKeyword_0_0_0; }
		
		//async_sender=[Role]
		public Assignment getAsync_senderAssignment_0_0_1() { return cAsync_senderAssignment_0_0_1; }
		
		//[Role]
		public CrossReference getAsync_senderRoleCrossReference_0_0_1_0() { return cAsync_senderRoleCrossReference_0_0_1_0; }
		
		//ID
		public RuleCall getAsync_senderRoleIDParserRuleCall_0_0_1_0_1() { return cAsync_senderRoleIDParserRuleCall_0_0_1_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_0_0_2() { return cEqualsSignGreaterThanSignKeyword_0_0_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_0_3() { return cRightSquareBracketKeyword_0_0_3; }
		
		//receiver=[Role]
		public Assignment getReceiverAssignment_0_0_4() { return cReceiverAssignment_0_0_4; }
		
		//[Role]
		public CrossReference getReceiverRoleCrossReference_0_0_4_0() { return cReceiverRoleCrossReference_0_0_4_0; }
		
		//ID
		public RuleCall getReceiverRoleIDParserRuleCall_0_0_4_0_1() { return cReceiverRoleIDParserRuleCall_0_0_4_0_1; }
		
		//sender=[Role] '[' '=>' async_receiver=[Role] ']'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//sender=[Role]
		public Assignment getSenderAssignment_0_1_0() { return cSenderAssignment_0_1_0; }
		
		//[Role]
		public CrossReference getSenderRoleCrossReference_0_1_0_0() { return cSenderRoleCrossReference_0_1_0_0; }
		
		//ID
		public RuleCall getSenderRoleIDParserRuleCall_0_1_0_0_1() { return cSenderRoleIDParserRuleCall_0_1_0_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1_1() { return cLeftSquareBracketKeyword_0_1_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_0_1_2() { return cEqualsSignGreaterThanSignKeyword_0_1_2; }
		
		//async_receiver=[Role]
		public Assignment getAsync_receiverAssignment_0_1_3() { return cAsync_receiverAssignment_0_1_3; }
		
		//[Role]
		public CrossReference getAsync_receiverRoleCrossReference_0_1_3_0() { return cAsync_receiverRoleCrossReference_0_1_3_0; }
		
		//ID
		public RuleCall getAsync_receiverRoleIDParserRuleCall_0_1_3_0_1() { return cAsync_receiverRoleIDParserRuleCall_0_1_3_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1_4() { return cRightSquareBracketKeyword_0_1_4; }
		
		//sender=[Role] '=>' receiver=[Role]
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//sender=[Role]
		public Assignment getSenderAssignment_0_2_0() { return cSenderAssignment_0_2_0; }
		
		//[Role]
		public CrossReference getSenderRoleCrossReference_0_2_0_0() { return cSenderRoleCrossReference_0_2_0_0; }
		
		//ID
		public RuleCall getSenderRoleIDParserRuleCall_0_2_0_0_1() { return cSenderRoleIDParserRuleCall_0_2_0_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_0_2_1() { return cEqualsSignGreaterThanSignKeyword_0_2_1; }
		
		//receiver=[Role]
		public Assignment getReceiverAssignment_0_2_2() { return cReceiverAssignment_0_2_2; }
		
		//[Role]
		public CrossReference getReceiverRoleCrossReference_0_2_2_0() { return cReceiverRoleCrossReference_0_2_2_0; }
		
		//ID
		public RuleCall getReceiverRoleIDParserRuleCall_0_2_2_0_1() { return cReceiverRoleIDParserRuleCall_0_2_2_0_1; }
		
		//OP600XFY
		public RuleCall getOP600XFYTerminalRuleCall_1() { return cOP600XFYTerminalRuleCall_1; }
		
		//performative=ATOM '(' content=Expression0 ')' | content=Expression0
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//performative=ATOM '(' content=Expression0 ')'
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//performative=ATOM
		public Assignment getPerformativeAssignment_2_0_0() { return cPerformativeAssignment_2_0_0; }
		
		//ATOM
		public RuleCall getPerformativeATOMTerminalRuleCall_2_0_0_0() { return cPerformativeATOMTerminalRuleCall_2_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0_1() { return cLeftParenthesisKeyword_2_0_1; }
		
		//content=Expression0
		public Assignment getContentAssignment_2_0_2() { return cContentAssignment_2_0_2; }
		
		//Expression0
		public RuleCall getContentExpression0ParserRuleCall_2_0_2_0() { return cContentExpression0ParserRuleCall_2_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_0_3() { return cRightParenthesisKeyword_2_0_3; }
		
		//content=Expression0
		public Assignment getContentAssignment_2_1() { return cContentAssignment_2_1; }
		
		//Expression0
		public RuleCall getContentExpression0ParserRuleCall_2_1_0() { return cContentExpression0ParserRuleCall_2_1_0; }
		
		//('[' conditions=ExpressionInfinity ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//conditions=ExpressionInfinity
		public Assignment getConditionsAssignment_3_1() { return cConditionsAssignment_3_1; }
		
		//ExpressionInfinity
		public RuleCall getConditionsExpressionInfinityParserRuleCall_3_1_0() { return cConditionsExpressionInfinityParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}
	public class ChannelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Channel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cReliabilityAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cReliabilityNUMBERParserRuleCall_1_1_0 = (RuleCall)cReliabilityAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Channel:
		//	name=ID ('[' reliability=NUMBER ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('[' reliability=NUMBER ']')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDParserRuleCall_0_0() { return cNameIDParserRuleCall_0_0; }
		
		//('[' reliability=NUMBER ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//reliability=NUMBER
		public Assignment getReliabilityAssignment_1_1() { return cReliabilityAssignment_1_1; }
		
		//NUMBER
		public RuleCall getReliabilityNUMBERParserRuleCall_1_1_0() { return cReliabilityNUMBERParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Role");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cDollarSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cClassAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cClassAlternatives_1_1_0 = (Alternatives)cClassAssignment_1_1.eContents().get(0);
		private final RuleCall cClassVARIABLETerminalRuleCall_1_1_0_0 = (RuleCall)cClassAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cClassATOMTerminalRuleCall_1_1_0_1 = (RuleCall)cClassAlternatives_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Assignment cArgsAssignment_1_2_1_0 = (Assignment)cGroup_1_2_1.eContents().get(0);
		private final RuleCall cArgsArgumentParserRuleCall_1_2_1_0_0 = (RuleCall)cArgsAssignment_1_2_1_0.eContents().get(0);
		private final RuleCall cOP1000XFYTerminalRuleCall_1_2_1_1 = (RuleCall)cGroup_1_2_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Keyword cDollarSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Role:
		//	name=ID ('$' class=(VARIABLE | ATOM) ('(' (args+=Argument OP1000XFY?)* ')')? '$')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('$' class=(VARIABLE | ATOM) ('(' (args+=Argument OP1000XFY?)* ')')? '$')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDParserRuleCall_0_0() { return cNameIDParserRuleCall_0_0; }
		
		//('$' class=(VARIABLE | ATOM) ('(' (args+=Argument OP1000XFY?)* ')')? '$')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'$'
		public Keyword getDollarSignKeyword_1_0() { return cDollarSignKeyword_1_0; }
		
		//class=(VARIABLE | ATOM)
		public Assignment getClassAssignment_1_1() { return cClassAssignment_1_1; }
		
		//(VARIABLE | ATOM)
		public Alternatives getClassAlternatives_1_1_0() { return cClassAlternatives_1_1_0; }
		
		//VARIABLE
		public RuleCall getClassVARIABLETerminalRuleCall_1_1_0_0() { return cClassVARIABLETerminalRuleCall_1_1_0_0; }
		
		//ATOM
		public RuleCall getClassATOMTerminalRuleCall_1_1_0_1() { return cClassATOMTerminalRuleCall_1_1_0_1; }
		
		//('(' (args+=Argument OP1000XFY?)* ')')?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2_0() { return cLeftParenthesisKeyword_1_2_0; }
		
		//(args+=Argument OP1000XFY?)*
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//args+=Argument
		public Assignment getArgsAssignment_1_2_1_0() { return cArgsAssignment_1_2_1_0; }
		
		//Argument
		public RuleCall getArgsArgumentParserRuleCall_1_2_1_0_0() { return cArgsArgumentParserRuleCall_1_2_1_0_0; }
		
		//OP1000XFY?
		public RuleCall getOP1000XFYTerminalRuleCall_1_2_1_1() { return cOP1000XFYTerminalRuleCall_1_2_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2_2() { return cRightParenthesisKeyword_1_2_2; }
		
		//'$'
		public Keyword getDollarSignKeyword_1_3() { return cDollarSignKeyword_1_3; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Argument");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Argument:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class PartitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Partition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPartitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cConstraintsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cConstraintsTogetherParserRuleCall_2_0_0 = (RuleCall)cConstraintsAssignment_2_0.eContents().get(0);
		private final RuleCall cOP1000XFYTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Partition:
		//	{Partition} '[' (constraints+=Together OP1000XFY?)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{Partition} '[' (constraints+=Together OP1000XFY?)* ']'
		public Group getGroup() { return cGroup; }
		
		//{Partition}
		public Action getPartitionAction_0() { return cPartitionAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(constraints+=Together OP1000XFY?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//constraints+=Together
		public Assignment getConstraintsAssignment_2_0() { return cConstraintsAssignment_2_0; }
		
		//Together
		public RuleCall getConstraintsTogetherParserRuleCall_2_0_0() { return cConstraintsTogetherParserRuleCall_2_0_0; }
		
		//OP1000XFY?
		public RuleCall getOP1000XFYTerminalRuleCall_2_1() { return cOP1000XFYTerminalRuleCall_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class TogetherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Together");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTogetherAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRolesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cRolesRoleCrossReference_2_0_0 = (CrossReference)cRolesAssignment_2_0.eContents().get(0);
		private final RuleCall cRolesRoleIDParserRuleCall_2_0_0_1 = (RuleCall)cRolesRoleCrossReference_2_0_0.eContents().get(1);
		private final RuleCall cOP1000XFYTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Together:
		//	{Together} '[' (roles+=[Role] OP1000XFY?)+ ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{Together} '[' (roles+=[Role] OP1000XFY?)+ ']'
		public Group getGroup() { return cGroup; }
		
		//{Together}
		public Action getTogetherAction_0() { return cTogetherAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(roles+=[Role] OP1000XFY?)+
		public Group getGroup_2() { return cGroup_2; }
		
		//roles+=[Role]
		public Assignment getRolesAssignment_2_0() { return cRolesAssignment_2_0; }
		
		//[Role]
		public CrossReference getRolesRoleCrossReference_2_0_0() { return cRolesRoleCrossReference_2_0_0; }
		
		//ID
		public RuleCall getRolesRoleIDParserRuleCall_2_0_0_1() { return cRolesRoleIDParserRuleCall_2_0_0_1; }
		
		//OP1000XFY?
		public RuleCall getOP1000XFYTerminalRuleCall_2_1() { return cOP1000XFYTerminalRuleCall_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Constraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLeftAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cLeftRoleCrossReference_0_1_0 = (CrossReference)cLeftAssignment_0_1.eContents().get(0);
		private final RuleCall cLeftRoleIDParserRuleCall_0_1_0_1 = (RuleCall)cLeftRoleCrossReference_0_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTogetherAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final Keyword cTogetherHyphenMinusGreaterThanSignLessThanSignHyphenMinusKeyword_0_3_0 = (Keyword)cTogetherAssignment_0_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cRightAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final CrossReference cRightRoleCrossReference_0_5_0 = (CrossReference)cRightAssignment_0_5.eContents().get(0);
		private final RuleCall cRightRoleIDParserRuleCall_0_5_0_1 = (RuleCall)cRightRoleCrossReference_0_5_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLeftAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cLeftRoleCrossReference_1_1_0 = (CrossReference)cLeftAssignment_1_1.eContents().get(0);
		private final RuleCall cLeftRoleIDParserRuleCall_1_1_0_1 = (RuleCall)cLeftRoleCrossReference_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cSplitAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cSplitLessThanSignHyphenMinusHyphenMinusGreaterThanSignKeyword_1_3_0 = (Keyword)cSplitAssignment_1_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cRightAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final CrossReference cRightRoleCrossReference_1_5_0 = (CrossReference)cRightAssignment_1_5.eContents().get(0);
		private final RuleCall cRightRoleIDParserRuleCall_1_5_0_1 = (RuleCall)cRightRoleCrossReference_1_5_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSingletonsAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cNumber_singletonsKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cOP600XFYTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Assignment cParMinAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final Alternatives cParMinAlternatives_2_3_0 = (Alternatives)cParMinAssignment_2_3.eContents().get(0);
		private final Keyword cParMinLeftParenthesisKeyword_2_3_0_0 = (Keyword)cParMinAlternatives_2_3_0.eContents().get(0);
		private final Keyword cParMinLeftSquareBracketKeyword_2_3_0_1 = (Keyword)cParMinAlternatives_2_3_0.eContents().get(1);
		private final Assignment cMinSingletonsAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cMinSingletonsINTTerminalRuleCall_2_4_0 = (RuleCall)cMinSingletonsAssignment_2_4.eContents().get(0);
		private final RuleCall cOP1000XFYTerminalRuleCall_2_5 = (RuleCall)cGroup_2.eContents().get(5);
		private final Assignment cMaxSingletonsAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cMaxSingletonsINTTerminalRuleCall_2_6_0 = (RuleCall)cMaxSingletonsAssignment_2_6.eContents().get(0);
		private final Assignment cParMaxAssignment_2_7 = (Assignment)cGroup_2.eContents().get(7);
		private final Alternatives cParMaxAlternatives_2_7_0 = (Alternatives)cParMaxAssignment_2_7.eContents().get(0);
		private final Keyword cParMaxRightParenthesisKeyword_2_7_0_0 = (Keyword)cParMaxAlternatives_2_7_0.eContents().get(0);
		private final Keyword cParMaxRightSquareBracketKeyword_2_7_0_1 = (Keyword)cParMaxAlternatives_2_7_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSizeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSize_constraintsKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cOP600XFYTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Assignment cParMinAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final Alternatives cParMinAlternatives_3_3_0 = (Alternatives)cParMinAssignment_3_3.eContents().get(0);
		private final Keyword cParMinLeftParenthesisKeyword_3_3_0_0 = (Keyword)cParMinAlternatives_3_3_0.eContents().get(0);
		private final Keyword cParMinLeftSquareBracketKeyword_3_3_0_1 = (Keyword)cParMinAlternatives_3_3_0.eContents().get(1);
		private final Assignment cMinSizeAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cMinSizeINTTerminalRuleCall_3_4_0 = (RuleCall)cMinSizeAssignment_3_4.eContents().get(0);
		private final RuleCall cOP1000XFYTerminalRuleCall_3_5 = (RuleCall)cGroup_3.eContents().get(5);
		private final Assignment cMaxSizeAssignment_3_6 = (Assignment)cGroup_3.eContents().get(6);
		private final RuleCall cMaxSizeINTTerminalRuleCall_3_6_0 = (RuleCall)cMaxSizeAssignment_3_6.eContents().get(0);
		private final Assignment cParMaxAssignment_3_7 = (Assignment)cGroup_3.eContents().get(7);
		private final Alternatives cParMaxAlternatives_3_7_0 = (Alternatives)cParMaxAssignment_3_7.eContents().get(0);
		private final Keyword cParMaxRightParenthesisKeyword_3_7_0_0 = (Keyword)cParMaxAlternatives_3_7_0.eContents().get(0);
		private final Keyword cParMaxRightSquareBracketKeyword_3_7_0_1 = (Keyword)cParMaxAlternatives_3_7_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cCardinalityAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cNumber_constraintsKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cOP600XFYTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Assignment cParMinAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final Alternatives cParMinAlternatives_4_3_0 = (Alternatives)cParMinAssignment_4_3.eContents().get(0);
		private final Keyword cParMinLeftParenthesisKeyword_4_3_0_0 = (Keyword)cParMinAlternatives_4_3_0.eContents().get(0);
		private final Keyword cParMinLeftSquareBracketKeyword_4_3_0_1 = (Keyword)cParMinAlternatives_4_3_0.eContents().get(1);
		private final Assignment cMinCardinalityAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cMinCardinalityINTTerminalRuleCall_4_4_0 = (RuleCall)cMinCardinalityAssignment_4_4.eContents().get(0);
		private final RuleCall cOP1000XFYTerminalRuleCall_4_5 = (RuleCall)cGroup_4.eContents().get(5);
		private final Assignment cMaxCardinalityAssignment_4_6 = (Assignment)cGroup_4.eContents().get(6);
		private final RuleCall cMaxCardinalityINTTerminalRuleCall_4_6_0 = (RuleCall)cMaxCardinalityAssignment_4_6.eContents().get(0);
		private final Assignment cParMaxAssignment_4_7 = (Assignment)cGroup_4.eContents().get(7);
		private final Alternatives cParMaxAlternatives_4_7_0 = (Alternatives)cParMaxAssignment_4_7.eContents().get(0);
		private final Keyword cParMaxRightParenthesisKeyword_4_7_0_0 = (Keyword)cParMaxAlternatives_4_7_0.eContents().get(0);
		private final Keyword cParMaxRightSquareBracketKeyword_4_7_0_1 = (Keyword)cParMaxAlternatives_4_7_0.eContents().get(1);
		
		//Constraint:
		//	'[' left+=[Role]+ ']' together='-><-' '[' right+=[Role]+ ']' |
		//	'[' left+=[Role]+ ']' split='<-->' '[' right+=[Role]+ ']' | {Singletons} 'number_singletons' OP600XFY parMin=('(' |
		//	'[') minSingletons=INT OP1000XFY maxSingletons=INT parMax=(')' | ']') | {Size} 'size_constraints' OP600XFY parMin=('('
		//	| '[') minSize=INT OP1000XFY maxSize=INT parMax=(')' | ']') | {Cardinality} 'number_constraints' OP600XFY parMin=('('
		//	| '[') minCardinality=INT OP1000XFY maxCardinality=INT parMax=(')' | ']');
		@Override public ParserRule getRule() { return rule; }
		
		//'[' left+=[Role]+ ']' together='-><-' '[' right+=[Role]+ ']' | '[' left+=[Role]+ ']' split='<-->' '[' right+=[Role]+ ']'
		//| {Singletons} 'number_singletons' OP600XFY parMin=('(' | '[') minSingletons=INT OP1000XFY maxSingletons=INT
		//parMax=(')' | ']') | {Size} 'size_constraints' OP600XFY parMin=('(' | '[') minSize=INT OP1000XFY maxSize=INT
		//parMax=(')' | ']') | {Cardinality} 'number_constraints' OP600XFY parMin=('(' | '[') minCardinality=INT OP1000XFY
		//maxCardinality=INT parMax=(')' | ']')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' left+=[Role]+ ']' together='-><-' '[' right+=[Role]+ ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//left+=[Role]+
		public Assignment getLeftAssignment_0_1() { return cLeftAssignment_0_1; }
		
		//[Role]
		public CrossReference getLeftRoleCrossReference_0_1_0() { return cLeftRoleCrossReference_0_1_0; }
		
		//ID
		public RuleCall getLeftRoleIDParserRuleCall_0_1_0_1() { return cLeftRoleIDParserRuleCall_0_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//together='-><-'
		public Assignment getTogetherAssignment_0_3() { return cTogetherAssignment_0_3; }
		
		//'-><-'
		public Keyword getTogetherHyphenMinusGreaterThanSignLessThanSignHyphenMinusKeyword_0_3_0() { return cTogetherHyphenMinusGreaterThanSignLessThanSignHyphenMinusKeyword_0_3_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_4() { return cLeftSquareBracketKeyword_0_4; }
		
		//right+=[Role]+
		public Assignment getRightAssignment_0_5() { return cRightAssignment_0_5; }
		
		//[Role]
		public CrossReference getRightRoleCrossReference_0_5_0() { return cRightRoleCrossReference_0_5_0; }
		
		//ID
		public RuleCall getRightRoleIDParserRuleCall_0_5_0_1() { return cRightRoleIDParserRuleCall_0_5_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_6() { return cRightSquareBracketKeyword_0_6; }
		
		//'[' left+=[Role]+ ']' split='<-->' '[' right+=[Role]+ ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//left+=[Role]+
		public Assignment getLeftAssignment_1_1() { return cLeftAssignment_1_1; }
		
		//[Role]
		public CrossReference getLeftRoleCrossReference_1_1_0() { return cLeftRoleCrossReference_1_1_0; }
		
		//ID
		public RuleCall getLeftRoleIDParserRuleCall_1_1_0_1() { return cLeftRoleIDParserRuleCall_1_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//split='<-->'
		public Assignment getSplitAssignment_1_3() { return cSplitAssignment_1_3; }
		
		//'<-->'
		public Keyword getSplitLessThanSignHyphenMinusHyphenMinusGreaterThanSignKeyword_1_3_0() { return cSplitLessThanSignHyphenMinusHyphenMinusGreaterThanSignKeyword_1_3_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_4() { return cLeftSquareBracketKeyword_1_4; }
		
		//right+=[Role]+
		public Assignment getRightAssignment_1_5() { return cRightAssignment_1_5; }
		
		//[Role]
		public CrossReference getRightRoleCrossReference_1_5_0() { return cRightRoleCrossReference_1_5_0; }
		
		//ID
		public RuleCall getRightRoleIDParserRuleCall_1_5_0_1() { return cRightRoleIDParserRuleCall_1_5_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_6() { return cRightSquareBracketKeyword_1_6; }
		
		//{Singletons} 'number_singletons' OP600XFY parMin=('(' | '[') minSingletons=INT OP1000XFY maxSingletons=INT parMax=(')' |
		//']')
		public Group getGroup_2() { return cGroup_2; }
		
		//{Singletons}
		public Action getSingletonsAction_2_0() { return cSingletonsAction_2_0; }
		
		//'number_singletons'
		public Keyword getNumber_singletonsKeyword_2_1() { return cNumber_singletonsKeyword_2_1; }
		
		//OP600XFY
		public RuleCall getOP600XFYTerminalRuleCall_2_2() { return cOP600XFYTerminalRuleCall_2_2; }
		
		//parMin=('(' | '[')
		public Assignment getParMinAssignment_2_3() { return cParMinAssignment_2_3; }
		
		//('(' | '[')
		public Alternatives getParMinAlternatives_2_3_0() { return cParMinAlternatives_2_3_0; }
		
		//'('
		public Keyword getParMinLeftParenthesisKeyword_2_3_0_0() { return cParMinLeftParenthesisKeyword_2_3_0_0; }
		
		//'['
		public Keyword getParMinLeftSquareBracketKeyword_2_3_0_1() { return cParMinLeftSquareBracketKeyword_2_3_0_1; }
		
		//minSingletons=INT
		public Assignment getMinSingletonsAssignment_2_4() { return cMinSingletonsAssignment_2_4; }
		
		//INT
		public RuleCall getMinSingletonsINTTerminalRuleCall_2_4_0() { return cMinSingletonsINTTerminalRuleCall_2_4_0; }
		
		//OP1000XFY
		public RuleCall getOP1000XFYTerminalRuleCall_2_5() { return cOP1000XFYTerminalRuleCall_2_5; }
		
		//maxSingletons=INT
		public Assignment getMaxSingletonsAssignment_2_6() { return cMaxSingletonsAssignment_2_6; }
		
		//INT
		public RuleCall getMaxSingletonsINTTerminalRuleCall_2_6_0() { return cMaxSingletonsINTTerminalRuleCall_2_6_0; }
		
		//parMax=(')' | ']')
		public Assignment getParMaxAssignment_2_7() { return cParMaxAssignment_2_7; }
		
		//(')' | ']')
		public Alternatives getParMaxAlternatives_2_7_0() { return cParMaxAlternatives_2_7_0; }
		
		//')'
		public Keyword getParMaxRightParenthesisKeyword_2_7_0_0() { return cParMaxRightParenthesisKeyword_2_7_0_0; }
		
		//']'
		public Keyword getParMaxRightSquareBracketKeyword_2_7_0_1() { return cParMaxRightSquareBracketKeyword_2_7_0_1; }
		
		//{Size} 'size_constraints' OP600XFY parMin=('(' | '[') minSize=INT OP1000XFY maxSize=INT parMax=(')' | ']')
		public Group getGroup_3() { return cGroup_3; }
		
		//{Size}
		public Action getSizeAction_3_0() { return cSizeAction_3_0; }
		
		//'size_constraints'
		public Keyword getSize_constraintsKeyword_3_1() { return cSize_constraintsKeyword_3_1; }
		
		//OP600XFY
		public RuleCall getOP600XFYTerminalRuleCall_3_2() { return cOP600XFYTerminalRuleCall_3_2; }
		
		//parMin=('(' | '[')
		public Assignment getParMinAssignment_3_3() { return cParMinAssignment_3_3; }
		
		//('(' | '[')
		public Alternatives getParMinAlternatives_3_3_0() { return cParMinAlternatives_3_3_0; }
		
		//'('
		public Keyword getParMinLeftParenthesisKeyword_3_3_0_0() { return cParMinLeftParenthesisKeyword_3_3_0_0; }
		
		//'['
		public Keyword getParMinLeftSquareBracketKeyword_3_3_0_1() { return cParMinLeftSquareBracketKeyword_3_3_0_1; }
		
		//minSize=INT
		public Assignment getMinSizeAssignment_3_4() { return cMinSizeAssignment_3_4; }
		
		//INT
		public RuleCall getMinSizeINTTerminalRuleCall_3_4_0() { return cMinSizeINTTerminalRuleCall_3_4_0; }
		
		//OP1000XFY
		public RuleCall getOP1000XFYTerminalRuleCall_3_5() { return cOP1000XFYTerminalRuleCall_3_5; }
		
		//maxSize=INT
		public Assignment getMaxSizeAssignment_3_6() { return cMaxSizeAssignment_3_6; }
		
		//INT
		public RuleCall getMaxSizeINTTerminalRuleCall_3_6_0() { return cMaxSizeINTTerminalRuleCall_3_6_0; }
		
		//parMax=(')' | ']')
		public Assignment getParMaxAssignment_3_7() { return cParMaxAssignment_3_7; }
		
		//(')' | ']')
		public Alternatives getParMaxAlternatives_3_7_0() { return cParMaxAlternatives_3_7_0; }
		
		//')'
		public Keyword getParMaxRightParenthesisKeyword_3_7_0_0() { return cParMaxRightParenthesisKeyword_3_7_0_0; }
		
		//']'
		public Keyword getParMaxRightSquareBracketKeyword_3_7_0_1() { return cParMaxRightSquareBracketKeyword_3_7_0_1; }
		
		//{Cardinality} 'number_constraints' OP600XFY parMin=('(' | '[') minCardinality=INT OP1000XFY maxCardinality=INT
		//parMax=(')' | ']')
		public Group getGroup_4() { return cGroup_4; }
		
		//{Cardinality}
		public Action getCardinalityAction_4_0() { return cCardinalityAction_4_0; }
		
		//'number_constraints'
		public Keyword getNumber_constraintsKeyword_4_1() { return cNumber_constraintsKeyword_4_1; }
		
		//OP600XFY
		public RuleCall getOP600XFYTerminalRuleCall_4_2() { return cOP600XFYTerminalRuleCall_4_2; }
		
		//parMin=('(' | '[')
		public Assignment getParMinAssignment_4_3() { return cParMinAssignment_4_3; }
		
		//('(' | '[')
		public Alternatives getParMinAlternatives_4_3_0() { return cParMinAlternatives_4_3_0; }
		
		//'('
		public Keyword getParMinLeftParenthesisKeyword_4_3_0_0() { return cParMinLeftParenthesisKeyword_4_3_0_0; }
		
		//'['
		public Keyword getParMinLeftSquareBracketKeyword_4_3_0_1() { return cParMinLeftSquareBracketKeyword_4_3_0_1; }
		
		//minCardinality=INT
		public Assignment getMinCardinalityAssignment_4_4() { return cMinCardinalityAssignment_4_4; }
		
		//INT
		public RuleCall getMinCardinalityINTTerminalRuleCall_4_4_0() { return cMinCardinalityINTTerminalRuleCall_4_4_0; }
		
		//OP1000XFY
		public RuleCall getOP1000XFYTerminalRuleCall_4_5() { return cOP1000XFYTerminalRuleCall_4_5; }
		
		//maxCardinality=INT
		public Assignment getMaxCardinalityAssignment_4_6() { return cMaxCardinalityAssignment_4_6; }
		
		//INT
		public RuleCall getMaxCardinalityINTTerminalRuleCall_4_6_0() { return cMaxCardinalityINTTerminalRuleCall_4_6_0; }
		
		//parMax=(')' | ']')
		public Assignment getParMaxAssignment_4_7() { return cParMaxAssignment_4_7; }
		
		//(')' | ']')
		public Alternatives getParMaxAlternatives_4_7_0() { return cParMaxAlternatives_4_7_0; }
		
		//')'
		public Keyword getParMaxRightParenthesisKeyword_4_7_0_0() { return cParMaxRightParenthesisKeyword_4_7_0_0; }
		
		//']'
		public Keyword getParMaxRightSquareBracketKeyword_4_7_0_1() { return cParMaxRightSquareBracketKeyword_4_7_0_1; }
	}
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.Module");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVARIABLETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cATOMTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Module:
		//	VARIABLE | ATOM;
		@Override public ParserRule getRule() { return rule; }
		
		//VARIABLE | ATOM
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_0() { return cVARIABLETerminalRuleCall_0; }
		
		//ATOM
		public RuleCall getATOMTerminalRuleCall_1() { return cATOMTerminalRuleCall_1; }
	}
	
	
	private final DomainmodelElements pDomainmodel;
	private final TerminalRule tOP1150FX;
	private final IDElements pID;
	private final TerminalRule tWHITESPACE;
	private final TerminalRule tSINGLE_LINE_COMMENT;
	private final TerminalRule tOP1200XFX;
	private final TerminalRule tOP1200FX;
	private final TerminalRule tOP1100XFY;
	private final TerminalRule tOP1050XFY;
	private final TerminalRule tOP1000XFY;
	private final TerminalRule tOP954XFY;
	private final TerminalRule tOP900FY;
	private final TerminalRule tOP900FX;
	private final TerminalRule tOP700XFXL;
	private final TerminalRule tOP700XFXR;
	private final TerminalRule tOP700XFX;
	private final TerminalRule tOP600XFY;
	private final TerminalRule tOP500YFX;
	private final TerminalRule tOP500FX;
	private final TerminalRule tOP400FX1;
	private final TerminalRule tOP400YFX;
	private final TerminalRule tOP200XFX;
	private final TerminalRule tOP200XFY;
	private final TerminalRule tATOM;
	private final ATOMSElements pATOMS;
	private final TerminalRule tVARIABLE;
	private final TerminalRule tSTRING;
	private final TerminalRule tINT;
	private final TerminalRule tEXT_INT;
	private final NUMBERElements pNUMBER;
	private final ExpressionInfinityElements pExpressionInfinity;
	private final Expression1100xfyElements pExpression1100xfy;
	private final Expression1050xfyElements pExpression1050xfy;
	private final Expression1000xfyElements pExpression1000xfy;
	private final Expression954xfyElements pExpression954xfy;
	private final Expression700xfxElements pExpression700xfx;
	private final Expression600xfyElements pExpression600xfy;
	private final Expression500yfxElements pExpression500yfx;
	private final Expression400yfxElements pExpression400yfx;
	private final Expression200xfxElements pExpression200xfx;
	private final Expression200xfyElements pExpression200xfy;
	private final Expression0Elements pExpression0;
	private final TraceExpressionElements pTraceExpression;
	private final TermElements pTerm;
	private final ShuffleExprElements pShuffleExpr;
	private final UnionExprElements pUnionExpr;
	private final AndExprElements pAndExpr;
	private final CatExprElements pCatExpr;
	private final PrimaryElements pPrimary;
	private final VarExprElements pVarExpr;
	private final FilterExprElements pFilterExpr;
	private final SeqExprElements pSeqExpr;
	private final TerminalExprElements pTerminalExpr;
	private final EventTypeElements pEventType;
	private final MsgElements pMsg;
	private final ChannelElements pChannel;
	private final RoleElements pRole;
	private final ArgumentElements pArgument;
	private final PartitionElements pPartition;
	private final TogetherElements pTogether;
	private final ConstraintElements pConstraint;
	private final ModuleElements pModule;
	
	private final Grammar grammar;

	@Inject
	public TExpGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pDomainmodel = new DomainmodelElements();
		this.tOP1150FX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP1150FX");
		this.pID = new IDElements();
		this.tWHITESPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.WHITESPACE");
		this.tSINGLE_LINE_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.SINGLE_LINE_COMMENT");
		this.tOP1200XFX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP1200XFX");
		this.tOP1200FX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP1200FX");
		this.tOP1100XFY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP1100XFY");
		this.tOP1050XFY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP1050XFY");
		this.tOP1000XFY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP1000XFY");
		this.tOP954XFY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP954XFY");
		this.tOP900FY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP900FY");
		this.tOP900FX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP900FX");
		this.tOP700XFXL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP700XFXL");
		this.tOP700XFXR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP700XFXR");
		this.tOP700XFX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP700XFX");
		this.tOP600XFY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP600XFY");
		this.tOP500YFX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP500YFX");
		this.tOP500FX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP500FX");
		this.tOP400FX1 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP400FX1");
		this.tOP400YFX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP400YFX");
		this.tOP200XFX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP200XFX");
		this.tOP200XFY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.OP200XFY");
		this.tATOM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.ATOM");
		this.pATOMS = new ATOMSElements();
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.VARIABLE");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.STRING");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.INT");
		this.tEXT_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "it.unige.dibris.trace_expression_language.TExp.EXT_INT");
		this.pNUMBER = new NUMBERElements();
		this.pExpressionInfinity = new ExpressionInfinityElements();
		this.pExpression1100xfy = new Expression1100xfyElements();
		this.pExpression1050xfy = new Expression1050xfyElements();
		this.pExpression1000xfy = new Expression1000xfyElements();
		this.pExpression954xfy = new Expression954xfyElements();
		this.pExpression700xfx = new Expression700xfxElements();
		this.pExpression600xfy = new Expression600xfyElements();
		this.pExpression500yfx = new Expression500yfxElements();
		this.pExpression400yfx = new Expression400yfxElements();
		this.pExpression200xfx = new Expression200xfxElements();
		this.pExpression200xfy = new Expression200xfyElements();
		this.pExpression0 = new Expression0Elements();
		this.pTraceExpression = new TraceExpressionElements();
		this.pTerm = new TermElements();
		this.pShuffleExpr = new ShuffleExprElements();
		this.pUnionExpr = new UnionExprElements();
		this.pAndExpr = new AndExprElements();
		this.pCatExpr = new CatExprElements();
		this.pPrimary = new PrimaryElements();
		this.pVarExpr = new VarExprElements();
		this.pFilterExpr = new FilterExprElements();
		this.pSeqExpr = new SeqExprElements();
		this.pTerminalExpr = new TerminalExprElements();
		this.pEventType = new EventTypeElements();
		this.pMsg = new MsgElements();
		this.pChannel = new ChannelElements();
		this.pRole = new RoleElements();
		this.pArgument = new ArgumentElements();
		this.pPartition = new PartitionElements();
		this.pTogether = new TogetherElements();
		this.pConstraint = new ConstraintElements();
		this.pModule = new ModuleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("it.unige.dibris.trace_expression_language.TExp".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Domainmodel:
	//	elements+=TraceExpression*;
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}
	
	//terminal OP1150FX:
	//	'dynamic' | 'discontiguous' | 'initialization' | 'module_transparent' | 'multifile' | 'thread_local' | 'volatile';
	public TerminalRule getOP1150FXRule() {
		return tOP1150FX;
	}
	
	//ID:
	//	ATOM;
	public IDElements getIDAccess() {
		return pID;
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}
	
	//terminal WHITESPACE:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWHITESPACERule() {
		return tWHITESPACE;
	}
	
	//terminal SINGLE_LINE_COMMENT:
	//	'%' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSINGLE_LINE_COMMENTRule() {
		return tSINGLE_LINE_COMMENT;
	}
	
	//terminal OP1200XFX:
	//	'-->' | ':-';
	public TerminalRule getOP1200XFXRule() {
		return tOP1200XFX;
	}
	
	//terminal OP1200FX:
	//	':-' | '?-';
	public TerminalRule getOP1200FXRule() {
		return tOP1200FX;
	}
	
	//terminal OP1100XFY:
	//	';' | '|';
	public TerminalRule getOP1100XFYRule() {
		return tOP1100XFY;
	}
	
	//terminal OP1050XFY:
	//	'->' | '*->';
	public TerminalRule getOP1050XFYRule() {
		return tOP1050XFY;
	}
	
	//terminal OP1000XFY:
	//	',';
	public TerminalRule getOP1000XFYRule() {
		return tOP1000XFY;
	}
	
	//terminal OP954XFY:
	//	'\\';
	public TerminalRule getOP954XFYRule() {
		return tOP954XFY;
	}
	
	//terminal OP900FY:
	//	'\\+';
	public TerminalRule getOP900FYRule() {
		return tOP900FY;
	}
	
	//terminal OP900FX:
	//	'~';
	public TerminalRule getOP900FXRule() {
		return tOP900FX;
	}
	
	//terminal OP700XFXL:
	//	'<';
	public TerminalRule getOP700XFXLRule() {
		return tOP700XFXL;
	}
	
	//terminal OP700XFXR:
	//	'>';
	public TerminalRule getOP700XFXRRule() {
		return tOP700XFXR;
	}
	
	//terminal OP700XFX:
	//	'=' | '=..' | '=@=' | '=:=' | '=<' | '==' | '=\\=' | '>=' | '@<' | '@=<' | '@>' | '@>=' | '\\=' | '\\=='
	//	| 'is';
	public TerminalRule getOP700XFXRule() {
		return tOP700XFX;
	}
	
	//terminal OP600XFY:
	//	':';
	public TerminalRule getOP600XFYRule() {
		return tOP600XFY;
	}
	
	//terminal OP500YFX:
	//	'+' | '-' | '/\\' | '\\/' | 'xor';
	public TerminalRule getOP500YFXRule() {
		return tOP500YFX;
	}
	
	//terminal OP500FX:
	//	'+' | '-' | '?' | '\\';
	public TerminalRule getOP500FXRule() {
		return tOP500FX;
	}
	
	//terminal OP400FX1:
	//	'>>';
	public TerminalRule getOP400FX1Rule() {
		return tOP400FX1;
	}
	
	//terminal OP400YFX:
	//	'*' | '/' | '//' | 'rdiv' | '<<' | 'mod' | 'rem';
	public TerminalRule getOP400YFXRule() {
		return tOP400YFX;
	}
	
	//terminal OP200XFX:
	//	'**';
	public TerminalRule getOP200XFXRule() {
		return tOP200XFX;
	}
	
	//terminal OP200XFY:
	//	'^';
	public TerminalRule getOP200XFYRule() {
		return tOP200XFY;
	}
	
	//terminal ATOM:
	//	'a'..'z' ('A'..'Z' | 'a'..'z' | '0'..'9' | '_')*;
	public TerminalRule getATOMRule() {
		return tATOM;
	}
	
	//ATOMS:
	//	'.' | '!' | ID | OP1200XFX | OP1200FX | OP1150FX | OP1100XFY | OP1050XFY | OP1000XFY | OP954XFY | OP900FY | OP900FX
	//	| OP700XFX | OP700XFXR | OP700XFXL | OP600XFY | OP500YFX | OP500FX | OP400YFX | OP200XFX | OP200XFY;
	public ATOMSElements getATOMSAccess() {
		return pATOMS;
	}
	
	public ParserRule getATOMSRule() {
		return getATOMSAccess().getRule();
	}
	
	//terminal VARIABLE:
	//	('A'..'Z' | '_') ('A'..'Z' | 'a'..'z' | '0'..'9' | '_')*;
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal STRING:
	//	'\''->'\'';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal EXT_INT:
	//	INT ('e' | 'E') ('-' | '+')? INT;
	public TerminalRule getEXT_INTRule() {
		return tEXT_INT;
	}
	
	//NUMBER hidden():
	//	'-'? INT ('.' (EXT_INT | INT))?;
	public NUMBERElements getNUMBERAccess() {
		return pNUMBER;
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}
	
	//// http://www.csupomona.edu/~jrfisher/www/prolog_tutorial/4.html
	//// xfx infix nonassociative 
	//// xfy infix right-associative 
	//// yfx infix left-associative 
	//// fx prefix nonassociative 
	//// fy prefix right-associative 
	//// xf postfix nonassociative 
	//// yf postfix left-associative
	//ExpressionInfinity PrologExpression:
	//	Expression1100xfy;
	public ExpressionInfinityElements getExpressionInfinityAccess() {
		return pExpressionInfinity;
	}
	
	public ParserRule getExpressionInfinityRule() {
		return getExpressionInfinityAccess().getRule();
	}
	
	////Expression1200xfx returns PrologExpression:
	////	Expression1200fx ({PrologExpression.left=current} op=OP1200XFX right=Expression1200fx)?;
	////Expression1200fx returns UnaryExpression:
	////	(op=OP1200FX)? right=Expression1150fx;
	////Expression1150fx returns UnaryExpression:
	////	(op=OP1150FX)? right=Expression1100xfy;
	//Expression1100xfy PrologExpression:
	//	Expression1050xfy ({PrologExpression.left=current} op=OP1100XFY right=Expression1100xfy)?;
	public Expression1100xfyElements getExpression1100xfyAccess() {
		return pExpression1100xfy;
	}
	
	public ParserRule getExpression1100xfyRule() {
		return getExpression1100xfyAccess().getRule();
	}
	
	//Expression1050xfy PrologExpression:
	//	Expression1000xfy ({PrologExpression.left=current} op=OP1050XFY right=Expression1050xfy)?;
	public Expression1050xfyElements getExpression1050xfyAccess() {
		return pExpression1050xfy;
	}
	
	public ParserRule getExpression1050xfyRule() {
		return getExpression1050xfyAccess().getRule();
	}
	
	//Expression1000xfy PrologExpression:
	//	Expression954xfy ({PrologExpression.left=current} op=OP1000XFY right=Expression1000xfy)?;
	public Expression1000xfyElements getExpression1000xfyAccess() {
		return pExpression1000xfy;
	}
	
	public ParserRule getExpression1000xfyRule() {
		return getExpression1000xfyAccess().getRule();
	}
	
	//Expression954xfy PrologExpression:
	//	Expression700xfx ({PrologExpression.left=current} op=OP954XFY right=Expression954xfy)?;
	public Expression954xfyElements getExpression954xfyAccess() {
		return pExpression954xfy;
	}
	
	public ParserRule getExpression954xfyRule() {
		return getExpression954xfyAccess().getRule();
	}
	
	////Expression900fy returns UnaryExpression:
	////	op=OP900FY right=Expression900fy | right=Expression900fx;
	////Expression900fx returns UnaryExpression:
	////	(op=OP900FX)? right=Expression700xfx;
	//Expression700xfx PrologExpression:
	//	Expression600xfy ({PrologExpression.left=current} op=(OP700XFX | OP700XFXR | OP700XFXL) right=Expression600xfy)?;
	public Expression700xfxElements getExpression700xfxAccess() {
		return pExpression700xfx;
	}
	
	public ParserRule getExpression700xfxRule() {
		return getExpression700xfxAccess().getRule();
	}
	
	//Expression600xfy PrologExpression:
	//	Expression500yfx ({PrologExpression.left=current} op=OP600XFY right=Expression600xfy)?;
	public Expression600xfyElements getExpression600xfyAccess() {
		return pExpression600xfy;
	}
	
	public ParserRule getExpression600xfyRule() {
		return getExpression600xfyAccess().getRule();
	}
	
	//Expression500yfx PrologExpression:
	//	Expression400yfx ({PrologExpression.left=current} op=OP500YFX right=Expression400yfx)*;
	public Expression500yfxElements getExpression500yfxAccess() {
		return pExpression500yfx;
	}
	
	public ParserRule getExpression500yfxRule() {
		return getExpression500yfxAccess().getRule();
	}
	
	////Expression500fx returns UnaryExpression:
	////	(op=OP500FX)? right=Expression400yfx;
	//Expression400yfx PrologExpression:
	//	Expression200xfx ({PrologExpression.left=current} op=OP400YFX right=Expression200xfx)*;
	public Expression400yfxElements getExpression400yfxAccess() {
		return pExpression400yfx;
	}
	
	public ParserRule getExpression400yfxRule() {
		return getExpression400yfxAccess().getRule();
	}
	
	//Expression200xfx PrologExpression:
	//	Expression200xfy ({PrologExpression.left=current} op=OP200XFX right=Expression200xfy)?;
	public Expression200xfxElements getExpression200xfxAccess() {
		return pExpression200xfx;
	}
	
	public ParserRule getExpression200xfxRule() {
		return getExpression200xfxAccess().getRule();
	}
	
	//Expression200xfy PrologExpression:
	//	Expression0 ({PrologExpression.left=current} op=OP200XFY right=Expression200xfy)?;
	public Expression200xfyElements getExpression200xfyAccess() {
		return pExpression200xfy;
	}
	
	public ParserRule getExpression200xfyRule() {
		return getExpression200xfyAccess().getRule();
	}
	
	//Expression0 PrologExpression:
	//	{AtomExpression} atom=ATOMS ('(' terms=ExpressionInfinity ')')?
	//	| {VariableExpression} name=VARIABLE
	//	| {StringExpression} value=STRING
	//	| {NumberExpression} value=NUMBER
	//	| {ListExpression} '[' (head=ExpressionInfinity ('|' tail=ExpressionInfinity)?)? ']'
	//	| '(' ExpressionInfinity ')';
	public Expression0Elements getExpression0Access() {
		return pExpression0;
	}
	
	public ParserRule getExpression0Rule() {
		return getExpression0Access().getRule();
	}
	
	//// Trace expressions    
	//TraceExpression:
	//	{TraceExpression}
	//	'trace_expression' '{'
	//	'id:' name=ID (bodyL+='body:' terms+=Term+ | rolesL+='roles:' (roles+=Role OP1000XFY?)* | typesL+='types:'
	//	types+=EventType* | modulesL+='modules:' modules+=Module* | decentralizedL+='decentralized:' decentralized+=('true' |
	//	'false') | partitionL+='partition:' partition+=Partition | constraintsL+='constraints:' constraints+=Constraint* |
	//	guiL+='gui:' gui+=('true' | 'false') | minimalL+='minimal:' minimal+=('true' | 'false') | thresholdL+='threshold:'
	//	threshold+=NUMBER | channelsL+='channels:' channels+=Channel+)+
	//	'}';
	public TraceExpressionElements getTraceExpressionAccess() {
		return pTraceExpression;
	}
	
	public ParserRule getTraceExpressionRule() {
		return getTraceExpressionAccess().getRule();
	}
	
	//Term:
	//	name=ID '<-' expr=ShuffleExpr;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//ShuffleExpr Expression:
	//	UnionExpr ({ShuffleExpr.left=current} => operator='|' right=UnionExpr)*;
	public ShuffleExprElements getShuffleExprAccess() {
		return pShuffleExpr;
	}
	
	public ParserRule getShuffleExprRule() {
		return getShuffleExprAccess().getRule();
	}
	
	//UnionExpr Expression:
	//	AndExpr ({UnionExpr.left=current} => operator='\\/' right=AndExpr)*;
	public UnionExprElements getUnionExprAccess() {
		return pUnionExpr;
	}
	
	public ParserRule getUnionExprRule() {
		return getUnionExprAccess().getRule();
	}
	
	//AndExpr Expression:
	//	CatExpr ({AndExpr.left=current} => operator='/\\' right=CatExpr)*;
	public AndExprElements getAndExprAccess() {
		return pAndExpr;
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}
	
	//CatExpr Expression:
	//	Primary ({CatExpr.left=current} => operator='*' right=Primary)*;
	public CatExprElements getCatExprAccess() {
		return pCatExpr;
	}
	
	public ParserRule getCatExprRule() {
		return getCatExprAccess().getRule();
	}
	
	//Primary Expression:
	//	{SeqExpr} seqExpr=SeqExpr | {FilterExpr} filterExpr=FilterExpr | {VarExpr} varExpr=VarExpr | {TerminalExpr}
	//	terminalExpr=TerminalExpr;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//VarExpr Expression:
	//	OP700XFXL variable=VARIABLE OP1000XFY bodyVar=Primary OP700XFXR;
	public VarExprElements getVarExprAccess() {
		return pVarExpr;
	}
	
	public ParserRule getVarExprRule() {
		return getVarExprAccess().getRule();
	}
	
	//FilterExpr Expression:
	//	typeFilter=[EventType] ('(' first=Expression0 (OP1000XFY exprs+=Expression0)* ')')? operator=OP400FX1
	//	bodyFilter=Primary;
	public FilterExprElements getFilterExprAccess() {
		return pFilterExpr;
	}
	
	public ParserRule getFilterExprRule() {
		return getFilterExprAccess().getRule();
	}
	
	//SeqExpr Expression:
	//	typeSeq=[EventType] ('(' first=Expression0 (OP1000XFY exprs+=Expression0)* ')')? operator=OP600XFY bodySeq=Primary;
	public SeqExprElements getSeqExprAccess() {
		return pSeqExpr;
	}
	
	public ParserRule getSeqExprRule() {
		return getSeqExprAccess().getRule();
	}
	
	//TerminalExpr Expression:
	//	eps='epsilon' | term=[Term] | '(' expr=ShuffleExpr ')';
	public TerminalExprElements getTerminalExprAccess() {
		return pTerminalExpr;
	}
	
	public ParserRule getTerminalExprRule() {
		return getTerminalExprAccess().getRule();
	}
	
	//EventType:
	//	name=ID ('(' expr=Expression0 (OP1000XFY exprs+=Expression0)* ')')? OP600XFY '{' msgs+=Msg* '}' ('[' channel=[Channel]
	//	']')?;
	public EventTypeElements getEventTypeAccess() {
		return pEventType;
	}
	
	public ParserRule getEventTypeRule() {
		return getEventTypeAccess().getRule();
	}
	
	//Msg:
	//	('[' async_sender=[Role] '=>' ']' receiver=[Role] | sender=[Role] '[' '=>' async_receiver=[Role] ']' | sender=[Role]
	//	'=>' receiver=[Role]) OP600XFY (performative=ATOM '(' content=Expression0 ')' | content=Expression0) ('['
	//	conditions=ExpressionInfinity ']')?;
	public MsgElements getMsgAccess() {
		return pMsg;
	}
	
	public ParserRule getMsgRule() {
		return getMsgAccess().getRule();
	}
	
	//Channel:
	//	name=ID ('[' reliability=NUMBER ']')?;
	public ChannelElements getChannelAccess() {
		return pChannel;
	}
	
	public ParserRule getChannelRule() {
		return getChannelAccess().getRule();
	}
	
	//Role:
	//	name=ID ('$' class=(VARIABLE | ATOM) ('(' (args+=Argument OP1000XFY?)* ')')? '$')?;
	public RoleElements getRoleAccess() {
		return pRole;
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}
	
	//Argument:
	//	STRING;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//Partition:
	//	{Partition} '[' (constraints+=Together OP1000XFY?)* ']';
	public PartitionElements getPartitionAccess() {
		return pPartition;
	}
	
	public ParserRule getPartitionRule() {
		return getPartitionAccess().getRule();
	}
	
	//Together:
	//	{Together} '[' (roles+=[Role] OP1000XFY?)+ ']';
	public TogetherElements getTogetherAccess() {
		return pTogether;
	}
	
	public ParserRule getTogetherRule() {
		return getTogetherAccess().getRule();
	}
	
	//Constraint:
	//	'[' left+=[Role]+ ']' together='-><-' '[' right+=[Role]+ ']' |
	//	'[' left+=[Role]+ ']' split='<-->' '[' right+=[Role]+ ']' | {Singletons} 'number_singletons' OP600XFY parMin=('(' |
	//	'[') minSingletons=INT OP1000XFY maxSingletons=INT parMax=(')' | ']') | {Size} 'size_constraints' OP600XFY parMin=('('
	//	| '[') minSize=INT OP1000XFY maxSize=INT parMax=(')' | ']') | {Cardinality} 'number_constraints' OP600XFY parMin=('('
	//	| '[') minCardinality=INT OP1000XFY maxCardinality=INT parMax=(')' | ']');
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//Module:
	//	VARIABLE | ATOM;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
}
