/*
 * generated by Xtext 2.12.0
 */
package it.unige.dibris.trace_expression_language.serializer;

import com.google.inject.Inject;
import it.unige.dibris.trace_expression_language.services.TExpGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class TExpSyntacticSequencer extends AbstractSyntacticSequencer {

	protected TExpGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AgentTraceExpression_OP1000XFYTerminalRuleCall_5_1_1_1_q;
	protected AbstractElementAlias match_Expression0_LeftParenthesisKeyword_5_0_a;
	protected AbstractElementAlias match_Expression0_LeftParenthesisKeyword_5_0_p;
	protected AbstractElementAlias match_Partition_OP1000XFYTerminalRuleCall_2_1_q;
	protected AbstractElementAlias match_Role_OP1000XFYTerminalRuleCall_1_2_1_1_q;
	protected AbstractElementAlias match_Role___LeftParenthesisKeyword_1_2_0_RightParenthesisKeyword_1_2_2__q;
	protected AbstractElementAlias match_Together_OP1000XFYTerminalRuleCall_2_1_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (TExpGrammarAccess) access;
		match_AgentTraceExpression_OP1000XFYTerminalRuleCall_5_1_1_1_q = new TokenAlias(false, true, grammarAccess.getAgentTraceExpressionAccess().getOP1000XFYTerminalRuleCall_5_1_1_1());
		match_Expression0_LeftParenthesisKeyword_5_0_a = new TokenAlias(true, true, grammarAccess.getExpression0Access().getLeftParenthesisKeyword_5_0());
		match_Expression0_LeftParenthesisKeyword_5_0_p = new TokenAlias(true, false, grammarAccess.getExpression0Access().getLeftParenthesisKeyword_5_0());
		match_Partition_OP1000XFYTerminalRuleCall_2_1_q = new TokenAlias(false, true, grammarAccess.getPartitionAccess().getOP1000XFYTerminalRuleCall_2_1());
		match_Role_OP1000XFYTerminalRuleCall_1_2_1_1_q = new TokenAlias(false, true, grammarAccess.getRoleAccess().getOP1000XFYTerminalRuleCall_1_2_1_1());
		match_Role___LeftParenthesisKeyword_1_2_0_RightParenthesisKeyword_1_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getRoleAccess().getLeftParenthesisKeyword_1_2_0()), new TokenAlias(false, false, grammarAccess.getRoleAccess().getRightParenthesisKeyword_1_2_2()));
		match_Together_OP1000XFYTerminalRuleCall_2_1_q = new TokenAlias(false, true, grammarAccess.getTogetherAccess().getOP1000XFYTerminalRuleCall_2_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getOP1000XFYRule())
			return getOP1000XFYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOP600XFYRule())
			return getOP600XFYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOP700XFXLRule())
			return getOP700XFXLToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOP700XFXRRule())
			return getOP700XFXRToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal OP1000XFY:
	 * 	',';
	 */
	protected String getOP1000XFYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * terminal OP600XFY:
	 * 	':';
	 */
	protected String getOP600XFYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":";
	}
	
	/**
	 * terminal OP700XFXL:
	 * 	'<'
	 * ;
	 */
	protected String getOP700XFXLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "<";
	}
	
	/**
	 * terminal OP700XFXR:
	 * 	'>'
	 * ;
	 */
	protected String getOP700XFXRToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ">";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AgentTraceExpression_OP1000XFYTerminalRuleCall_5_1_1_1_q.equals(syntax))
				emit_AgentTraceExpression_OP1000XFYTerminalRuleCall_5_1_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Expression0_LeftParenthesisKeyword_5_0_a.equals(syntax))
				emit_Expression0_LeftParenthesisKeyword_5_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Expression0_LeftParenthesisKeyword_5_0_p.equals(syntax))
				emit_Expression0_LeftParenthesisKeyword_5_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Partition_OP1000XFYTerminalRuleCall_2_1_q.equals(syntax))
				emit_Partition_OP1000XFYTerminalRuleCall_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Role_OP1000XFYTerminalRuleCall_1_2_1_1_q.equals(syntax))
				emit_Role_OP1000XFYTerminalRuleCall_1_2_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Role___LeftParenthesisKeyword_1_2_0_RightParenthesisKeyword_1_2_2__q.equals(syntax))
				emit_Role___LeftParenthesisKeyword_1_2_0_RightParenthesisKeyword_1_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Together_OP1000XFYTerminalRuleCall_2_1_q.equals(syntax))
				emit_Together_OP1000XFYTerminalRuleCall_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     OP1000XFY?
	 *
	 * This ambiguous syntax occurs at:
	 *     roles+=Role (ambiguity) '}' (rule end)
	 *     roles+=Role (ambiguity) bodyL+='body:'
	 *     roles+=Role (ambiguity) channelsL+='channels:'
	 *     roles+=Role (ambiguity) constraintsL+='constraints:'
	 *     roles+=Role (ambiguity) decentralizedL+='decentralized:'
	 *     roles+=Role (ambiguity) guiL+='gui:'
	 *     roles+=Role (ambiguity) minimalL+='minimal:'
	 *     roles+=Role (ambiguity) modulesL+='modules:'
	 *     roles+=Role (ambiguity) partitionL+='partition:'
	 *     roles+=Role (ambiguity) roles+=Role
	 *     roles+=Role (ambiguity) rolesL+='roles:'
	 *     roles+=Role (ambiguity) thresholdL+='threshold:'
	 *     roles+=Role (ambiguity) typesL+='types:'
	 */
	protected void emit_AgentTraceExpression_OP1000XFYTerminalRuleCall_5_1_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '[' ']' (rule start)
	 *     (rule start) (ambiguity) '[' head=ExpressionInfinity
	 *     (rule start) (ambiguity) atom=ATOMS
	 *     (rule start) (ambiguity) name=VARIABLE
	 *     (rule start) (ambiguity) value=NUMBER
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {PrologExpression.left=}
	 */
	protected void emit_Expression0_LeftParenthesisKeyword_5_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {PrologExpression.left=}
	 */
	protected void emit_Expression0_LeftParenthesisKeyword_5_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     OP1000XFY?
	 *
	 * This ambiguous syntax occurs at:
	 *     constraints+=Together (ambiguity) ']' (rule end)
	 *     constraints+=Together (ambiguity) constraints+=Together
	 */
	protected void emit_Partition_OP1000XFYTerminalRuleCall_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     OP1000XFY?
	 *
	 * This ambiguous syntax occurs at:
	 *     args+=Argument (ambiguity) ')' '$' (rule end)
	 *     args+=Argument (ambiguity) args+=Argument
	 */
	protected void emit_Role_OP1000XFYTerminalRuleCall_1_2_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     class=ATOM (ambiguity) '$' (rule end)
	 *     class=VARIABLE (ambiguity) '$' (rule end)
	 */
	protected void emit_Role___LeftParenthesisKeyword_1_2_0_RightParenthesisKeyword_1_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     OP1000XFY?
	 *
	 * This ambiguous syntax occurs at:
	 *     roles+=[Role|ID] (ambiguity) ']' (rule end)
	 *     roles+=[Role|ID] (ambiguity) roles+=[Role|ID]
	 */
	protected void emit_Together_OP1000XFYTerminalRuleCall_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
